********************************************************************************
********************************************************************************
DEFINE CLASS MainMenu AS SFMenu OF SFMenu.vcx
********************************************************************************
********************************************************************************
   PROCEDURE DefineMenu
      WITH THIS
         .AddPad('FileMenu', '', 'FileMenu')
         .AddPad('_MEDIT', '', 'EditMenu')
         .AddPad('Maintain', '', 'MainTain')
         .AddPad('Tasks', '', 'Tasks')
         .AddPad('Reports', '', 'Reports')
         .AddPad('Utilities', '', 'Utilities')
         .AddPad('Navigate', '', 'Navigate')
         .AddPad('Windows', '', 'Windows')
         .AddPad('HelpMenu', '', 'msm_systm')
      ENDWITH
   ENDPROC
ENDDEFINE


*===============================================================================
*===============================================================================
*===============================================================================
DEFINE CLASS FileMenu AS SFPad OF SFMenu.vcx
*===============================================================================
*===============================================================================
*===============================================================================
   cCaption   = [\<File]
   cKey       = [ALT+F]
   cPopupName = [FileMenu]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('OpenCompany', '', 'OpenCompany')
*!*            .AddBar('CloseCompany', '', 'CloseCompany')
         .AddBar('SetupCompany', '', 'SetupCompany')
         .AddBar('DeleteCompany', '', 'DeleteCompany')

         IF m.goapp.lQBVersion
            .AddSeparatorBar()
            .AddBar('ConnectToQB', '', 'ConnectToQB')
            .AddBar('DisconnectQB', '', 'DisconnectQB')
         ENDIF

         .AddSeparatorBar()
         .AddBar('BackupData', '', 'BackupData')
         .AddBar('RestoreData', '', 'RestoreData')

         IF NOT m.goapp.lCloudServer
            .AddBar('SendFile', '', 'SendFile')
            .AddBar('EditRegistry', '', 'EditRegistry')
         ENDIF

         .AddSeparatorBar()

         .AddBar('EditUsers', '', 'EditUsers')
         IF FILE('datafiles\copyu.txt')
            .AddBar('xCopyUsers', '', 'xCopyUsers')
         ENDIF
         .AddBar('ChangePassword', '', 'ChangePassword')
         .AddSeparatorBar()
         .AddBar('ChangeRegistrationCode', '', 'ChangeRegistrationCode')
*!*            .AddBar('CheckRegistrationCode', '', 'CheckRegistrationCode')
         .AddSeparatorBar()
         .AddBar('ViewToolBars', '', 'ViewToolBars')
         .AddSeparatorBar()
         .AddBar('SwitchUser', '', 'SwitchUser')
         .AddSeparatorBar()
         .AddBar('ExitApp', '', 'ExitApp')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS OpenCompany AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Open Company]
   cOnClickCommand = [do opencomp]
ENDDEFINE

*===============================================================================
DEFINE CLASS CloseCompany AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Close Company]
   cOnClickCommand = [do closecomp with .f., .t.]
   cSkipFor        = [not m.goapp.lopencompany]
ENDDEFINE

*===============================================================================
DEFINE CLASS SetupCompany AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Setup a \<New Company]
   cOnClickCommand = [do form compsetup]
   cSkipFor        = [m.goapp.lReadOnly or m.goapp.ldemo]
ENDDEFINE

*===============================================================================
DEFINE CLASS DeleteCompany AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Delete Company]
   cOnClickCommand = [do deletecomp]
   cSkipFor        = [m.goapp.lReadOnly]
ENDDEFINE

*===============================================================================
DEFINE CLASS ConnectToQB AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Connect To QuickBooks]
   cOnClickCommand = [m.goapp.oQB.qbconnection()]
   cSkipFor        = [m.goapp.oQB.lqbactive or not m.goapp.lopencompany or m.goApp.lExpired or m.goapp.lReadOnly]
ENDDEFINE

*===============================================================================
DEFINE CLASS DisconnectQB AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Close QuickBooks Connection]
   cOnClickCommand = [m.goapp.oQB.qbclose()]
   cSkipFor        = [not m.goapp.oQB.lqbactive or m.goApp.lExpired or m.goapp.lReadOnly]
ENDDEFINE

*===============================================================================
DEFINE CLASS BackupData AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Backup Data Files]
   cOnClickCommand = [m.goStateManager.openformmulti('filebackup.scx')]
   cSkipFor        = [not m.goapp.lopencompany or m.goapp.lReadOnly]
ENDDEFINE

*===============================================================================
DEFINE CLASS RestoreData AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Restore Data Files]
   cOnClickCommand = [m.goStateManager.openformmulti('filerestore.scx')]
   cSkipFor        = [not m.goapp.lopencompany or m.goapp.lReadOnly]
ENDDEFINE

*===============================================================================
DEFINE CLASS SendFile AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Send \<File to Pivoten]
   cOnClickCommand = [m.goStateManager.openformmulti('utftpsend.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS EditRegistry AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Edit Registry...]
   cOnClickCommand = [m.goStateManager.openformmulti('frmRegistryEditor')]
   cSkipFor        = [not m.goapp.lopencompany or m.goApp.lExpired or m.goapp.lReadonly]
ENDDEFINE

*===============================================================================
DEFINE CLASS EditUsers AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Edit User Accounts...]
   cOnClickCommand = [m.goStateManager.openformmulti('frmAccountEditor')]
   cSkipFor        = [not m.goapp.lopencompany or m.goApp.lExpired or m.goapp.lReadonly]
ENDDEFINE

*===============================================================================
DEFINE CLASS xCopyUsers AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Copy User Accounts...]
   PROCEDURE CLICK
      DO copyusers
   ENDPROC
   cSkipFor      = [not m.goapp.lopencompany or m.goApp.lExpired or m.goapp.lReadonly]
ENDDEFINE

*===============================================================================
DEFINE CLASS ChangePassword AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Change Password]
   cOnClickCommand = [m.goStateManager.OpenModalForm('frmSetLogonPassword')]
   cSkipFor        = [m.goApp.lExpired]
ENDDEFINE

*===============================================================================
DEFINE CLASS ChangeRegistrationCode AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Change Re\<gistration Code]
   cOnClickCommand = [m.goStateManager.openformmulti('changereg.scx')]
   cSkipFor        = [not m.goapp.lAdmin]
ENDDEFINE

*================================================================================
DEFINE CLASS CheckRegistrationCode AS SFBar OF SFMenu.vcx
*================================================================================
   cCaption = [Check for Updated Registration Code]
   PROCEDURE CLICK
      LOCAL oReg
      oReg = CREATEOBJECT('swregcode')
      oReg.RenewCode()
   ENDPROC
   cSkipFor = [m.goapp.lReadOnly]
ENDDEFINE

*===============================================================================
DEFINE CLASS ViewToolBars AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [View Toolbars...]
   cOnClickCommand = [m.goStateManager.OpenModalForm('frmViewToolbars')]
   cSkipFor        = 'empty(m.gostatemanager.atoolbars[1, 1])'
ENDDEFINE

*===============================================================================
DEFINE CLASS SwitchUser AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [S\<witch User]
   cOnClickCommand = [do opencomp]
ENDDEFINE

*===============================================================================
DEFINE CLASS ExitApp AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [E\<xit]
   cOnClickCommand = [m.goApp.Shutdown(.T.)]
ENDDEFINE

*===============================================================================
*===============================================================================
*===============================================================================
DEFINE CLASS _MEDIT AS SFPad OF SFMenu.vcx
*===============================================================================
*===============================================================================
*===============================================================================
   cCaption   = [\<Edit]
   cKey       = [ALT+E]
   cPopupName = [_medit]
   cSkipFor   = [not m.goapp.lopencompany]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('med_undo', '', 'med_undo')
         .AddBar('med_redo', '', 'med_redo')
         .AddSeparatorBar()
         .AddBar('med_cut', '', 'med_cut')
         .AddBar('med_copy', '', 'med_copy')
         .AddBar('med_paste', '', 'med_paste')
         .AddSeparatorBar()
         .AddBar('med_slcta', '', 'med_slcta')
         .AddSeparatorBar()
         .AddBar('EditPreferences', '', 'EditPreferences')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS med_undo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [\<Undo]
   cKey       = [CTRL+Z]
   cKeyText   = [Ctrl+Z]
   cSystemBar = [_med_undo]
ENDDEFINE

*===============================================================================
DEFINE CLASS med_redo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [Re\<do]
   cKey       = [CTRL+R]
   cKeyText   = [Ctrl+R]
   cSystemBar = [_med_redo]
ENDDEFINE

*===============================================================================
DEFINE CLASS med_cut AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [Cu\<t]
   cKey       = [CTRL+X]
   cKeyText   = [Ctrl+X]
   cSystemBar = [_med_cut]
ENDDEFINE

*===============================================================================
DEFINE CLASS med_copy AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [\<Copy]
   cKey       = [CTRL+C]
   cKeyText   = [Ctrl+C]
   cSystemBar = [_med_copy]
ENDDEFINE

*===============================================================================
DEFINE CLASS med_paste AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [\<Paste]
   cKey       = [CTRL+V]
   cKeyText   = [Ctrl+V]
   cSystemBar = [_med_paste]
ENDDEFINE

*===============================================================================
DEFINE CLASS med_slcta AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [Se\<lect All]
   cKey       = [CTRL+A]
   cKeyText   = [Ctrl+A]
   cSystemBar = [_med_slcta]
ENDDEFINE

*===============================================================================
DEFINE CLASS EditPreferences AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Prefere\<nces]
   cOnClickCommand = [m.gostatemanager.openformmulti('preferences.scx')]
ENDDEFINE

*===============================================================================
*===============================================================================
*===============================================================================
DEFINE CLASS Maintain AS SFPad OF SFMenu.vcx
*===============================================================================
*===============================================================================
*===============================================================================
   cCaption   = [\<Maintain]
   cKey       = [ALT+M]
   cPopupName = [Maintain]
   cSkipFor   = [not m.goapp.lopencompany or m.goApp.lExpired]

   PROCEDURE AddBars
      WITH THIS

         .AddBar('CompanyInfo', '', 'CompanyInfo')
         .AddSeparatorBar()

         IF m.goapp.lAMVersion
            .AddBar('ChartofAccounts', '', 'ChartofAccounts')
            .AddBar('GLAccountTypes', '', 'GLAccountTypes')
            .AddSeparatorBar()
            .AddBar('DisbursementJIBFiles', '', 'DisbursementJIBFiles')
            .AddSeparatorBar()
            .AddBar('CustomerInfo', '', 'CustomerInfo')
         ENDIF

         IF NOT m.goapp.lAMVersion
            .AddBar('LeaseInfo', '', 'LeaseInfo')
            .AddBar('WellInfo', '', 'WellInfo')
            .AddBar('OwnerInfo', '', 'OwnerInfo')
            .AddBar('DOIInfo', '', 'DOIInfo')
         ENDIF

         IF NOT m.goapp.lQBVersion
            .AddSeparatorBar()
            .AddBar('VendorInfo', '', 'VendorInfo')
         ENDIF

         IF NOT m.goapp.lAMVersion
            .AddSeparatorBar()
            .AddBar('OperatorInfo', '', 'OperatorInfo')
            .AddBar('PumperInfo', '', 'PumperInfo')
            .AddBar('PurchaserInfo', '', 'PurchaserInfo')

            IF NOT m.goapp.lPartnershipMod
               .AddBar('ProgramInfo', '', 'ProgramInfo')
            ELSE
               .AddBar('ProgramUnits', '', 'ProgramUnits')
            ENDIF

            .AddBar('GroupInfo', '', 'GroupInfo')
            .AddBar('MasterMeterInfo', '', 'MasterMeterInfo')
            .AddBar('ExpenseCodeInfo', '', 'ExpenseCodeInfo')
            .AddBar('RevenueCatInfo', '', 'RevenueCatInfo')
            .AddBar('TankInfo', '', 'TankInfo')
            .AddSeparatorBar()
            .AddBar('RecurringExpInfo', '', 'RecurringExpInfo')
            .AddBar('TaxTableInfo', '', 'TaxTableInfo')
            .AddBar('TaxSectionInfo', '', 'TaxSectionInfo')
            .AddSeparatorBar()
            .AddBar('OwnerHistoryAdj', '', 'OwnerHistoryAdj')
            .AddBar('WellHistoryAdj', '', 'WellHistoryAdj')
            .AddBar('SuspenseHistoryAdj', '', 'SuspenseHistoryAdj')
            IF NOT m.goapp.lQBVersion
               .AddBar('JIBBalanceAdj', '', 'JIBBalanceAdj')
            ENDIF
            .AddSeparatorBar()
            .AddBar('OwnerTotals', '', 'OwnerTotals')
            .AddBar('WellTotals', '', 'WellTotals')
         ENDIF

         IF m.goapp.lAMVersion AND m.goapp.lPayrollOpt AND m.goapp.lpayrolldata
            .AddBar('PayrollEmployeeInfo', '', 'PayrollEmployeeInfo')
         ENDIF

         .AddSeparatorBar()

         IF m.goapp.lAFEOpt
            .AddBar('AFEFiles', '', 'AFEFiles')
         ENDIF

         IF m.goapp.lLandOpt
            .AddBar('LandFiles', '', 'LandFiles')
         ENDIF

         .AddBar('InvestmentFiles', '', 'InvestmentFiles')

         IF m.goapp.lBrineOpt
            .AddBar('BrineFiles', '', 'BrineFiles')
         ENDIF

         IF m.goapp.lHouseGasOpt
            .AddBar('HouseGasOwners', '', 'HouseGasOwners')
         ENDIF

         IF m.goapp.lPluggingModule
            .AddBar('PluggingModule', '', 'PluggingModule')
         ENDIF

         .AddSeparatorBar()

         IF m.goapp.lAMVersion
            .AddBar('FixedAssetInfo', '', 'FixedAssetInfo')
            .AddBar('BillingCodes', '', 'BillingCodes')
            .AddBar('GLDeptInfo', '', 'GLDeptInfo')
            .AddBar('FinanceChargeCodes', '', 'FinanceChargeCodes')
         ENDIF

         IF m.goapp.lMICROpt
            .AddBar('MICRData', '', 'MICRData')
         ENDIF

         IF NOT m.goapp.lQBVersion
            .AddBar('TermsCodes', '', 'TermsCodes')
         ENDIF

         IF m.goapp.lAMVersion
            .AddBar('SalesTaxCodes', '', 'SalesTaxCodes')
         ENDIF

         IF m.goapp.lAMVersion AND m.goapp.lPayrollOpt AND m.goapp.lpayrolldata
            .AddBar('PayrollCodes', '', 'PayrollCodes')
         ENDIF

*!* Moved to Utilities
*!*            .AddSeparatorBar()
*!*            .AddBar('AddressNormalization', '', 'AddressNormalization')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS CompanyInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Company I\<nformation]
   cOnClickCommand = [m.goStateManager.openformmulti('company.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ChartofAccounts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Chart of \<Accounts]
   cOnClickCommand = [m.goStateManager.OpenFormMulti('glcoa.scx')]
   cSkipFor        = [NOT m.goApp.lGLData]
ENDDEFINE

*===============================================================================
DEFINE CLASS GLAccountTypes AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [G/L Account T\<ypes]
   cOnClickCommand = [m.goStateManager.OpenFormMulti('glacctyp.scx')]
   cSkipFor        = [NOT m.goApp.lGLData]
ENDDEFINE

*AM
*===============================================================================
*===============================================================================
DEFINE CLASS DisbursementJIBFiles AS SFBar OF SFMenu.vcx
*===============================================================================
*===============================================================================
   cCaption   = [\<Disbursement and JIB Files]
   cPopupName = [DisbJIBFiles]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('LeaseInfo', '', 'LeaseInfo')
         .AddBar('WellInfo', '', 'WellInfo')
         .AddBar('OwnerInfo', '', 'OwnerInfo')
         .AddBar('DOIInfo', '', 'DOIInfo')
         .AddSeparatorBar()
         .AddBar('PurchaserInfo', '', 'PurchaserInfo')
         .AddBar('GroupInfo', '', 'GroupInfo')
         .AddBar('MasterMeterInfo', '', 'MasterMeterInfo')
         .AddBar('OperatorInfo', '', 'OperatorInfo')
         .AddBar('PumperInfo', '', 'PumperInfo')
         .AddBar('TankInfo', '', 'TankInfo')
         .AddSeparatorBar()
         .AddBar('ExpenseCodeInfo', '', 'ExpenseCodeInfo')
         .AddBar('TaxSectionInfo', '', 'TaxSectionInfo')
         .AddBar('RevenueCatInfo', '', 'RevenueCatInfo')
         .AddSeparatorBar()

         .AddBar('RecurringExpInfo', '', 'RecurringExpInfo')

         .AddBar('TaxTableInfo', '', 'TaxTableInfo')
         .AddSeparatorBar()
         .AddBar('OwnerHistoryAdj', '', 'OwnerHistoryAdj')
         .AddBar('WellHistoryAdj', '', 'WellHistoryAdj')
         .AddBar('SuspenseHistoryAdj', '', 'SuspenseHistoryAdj')
         .AddSeparatorBar()
         .AddBar('OwnerTotals', '', 'OwnerTotals')
         .AddBar('WellTotals', '', 'WellTotals')

         .AddBar('PluggingModule', '', 'PluggingModule')

         IF NOT m.goapp.lPartnershipMod
            .AddBar('ProgramInfo', '', 'ProgramInfo')
         ELSE
            .AddBar('ProgramUnits', '', 'ProgramUnits')
         ENDIF
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS LeaseInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Lease Information]
   cOnClickCommand = [m.goStateManager.OpenFormMulti('lmleaseinfo.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata and not m.goapp.llanddata and not m.goapp.ljibdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS WellInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Well Information]
   cOnClickCommand = [m.goStateManager.OpenFormMulti('dmwellinfo.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata and not m.goapp.lpartnerdata and not m.goapp.lafedata and not m.goapp.ljibdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS OwnerInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Owner Information]
   cSkipFor = [not m.goapp.lrevdistdata and not m.goapp.lpartnerdata and not m.goapp.lafedata and not m.goapp.lhousegasdata and not m.goapp.ljibdata]

   PROCEDURE CLICK
      IF m.goapp.lPartnershipMod AND m.goapp.lQBVersion && GCW
         m.goStateManager.OpenFormMulti('dmownerinfo.scx')
      ELSE
         m.goStateManager.OpenFormMulti('dmowners.scx')
      ENDIF
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS DOIInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Division of Interests]
   cOnClickCommand = [m.goStateManager.openformmulti('dmdoi.scx')]
   cSkipFor        = [not m.goapp.ldoidata]
ENDDEFINE

*===============================================================================
DEFINE CLASS OperatorInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Operator Information]
   cOnClickCommand = [m.goStateManager.openformmulti('dmoperators.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS PumperInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [P\<umper Information]
   cOnClickCommand = [m.goStateManager.openformmulti('dmpumpers.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS PurchaserInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Purchaser Information]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrevsrc.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS ProgramInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Well P\<rogram/Partnerships]
   cOnClickCommand = [m.goStateManager.openformmulti('dmprog.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS ProgramUnits AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Partnership Units]
   cOnClickCommand = [m.goStateManager.openformmulti('progunits.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS GroupInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Well \<Group Definitions]
   cOnClickCommand = [m.goStateManager.openformmulti('dmgroups.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata and not m.goapp.ljibdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS MasterMeterInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Master Meters]
   cOnClickCommand = [m.goStateManager.openformmulti('dmmeters.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS ExpenseCodeInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [E\<xpense Codes]
   cOnClickCommand = [m.goStateManager.openformmulti('dmexpcat.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata and not m.goapp.lafedata and not m.goapp.ljibdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS RevenueCatInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Revenue \<Categories]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrevcat.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS TankInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Tank Information]
   cOnClickCommand = [m.goStateManager.openformmulti('dmtanks.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS FixedExpInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Recurring Well Expenses]
   cOnClickCommand = [m.goStateManager.openformmulti('dmfixedexp.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata and not m.goapp.ljibdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS RecurringExpInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Recurring Well Expenses]
   cOnClickCommand = [m.goStateManager.openformmulti('dmfixedpct.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata and not m.goapp.ljibdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS TaxTableInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Well Product Tax \<Tables]
   cOnClickCommand = [m.goStateManager.openformmulti('dmtaxes.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS TaxSectionInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Expense Section Co\<des]
   cOnClickCommand = [m.goStateManager.openformmulti('dmtaxcodes.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata and not m.goapp.lafedata and not m.goapp.ljibdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS OwnerHistoryAdj AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Owner \<History Adjustments]
   cOnClickCommand = [m.goStateManager.openformmulti('dmownerhistory.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS WellHistoryAdj AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Well History Ad\<justments]
   cOnClickCommand = [m.goStateManager.openformmulti('dmwellhistory.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS SuspenseHistoryAdj AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Suspense Beginning Balances/Adjustments]
   cOnClickCommand = [m.goStateManager.openformmulti('dmsuspbal.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS JIBBalanceAdj AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<JIB Beginning Balances/Adjustments]
   cOnClickCommand = [m.goStateManager.openformmulti('dmjibbal.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS OwnerTotals AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Owner Totals]
   cOnClickCommand = [m.goStateManager.openformmulti('dmowntot.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS WellTotals AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Well Totals]
   cOnClickCommand = [m.goStateManager.openformmulti('dmwelltot.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS CustomerInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Customer Information]
   cOnClickCommand = [m.goStateManager.openformmulti('arcust.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS VendorInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Vendor Information]
   cOnClickCommand = [m.goStateManager.openformmulti('apvendor.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS PayrollEmployeeInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Employee Information]
   cSkipFor = [not m.goapp.lpayrollopt or not m.goapp.lpayrolldata or m.goapp.lReadOnly]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('premp.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS LandFiles AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [Land Files]
   cPopupName = [LandManage]
   cSkipFor   = [not m.goapp.llandopt or not m.goapp.lLandData]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('LandInfo', '', 'LandInfo')
         .AddBar('LeaseOwners', '', 'LeaseOwners')
         .AddBar('Formations', '', 'Formations')
         .AddBar('AMIInfo', '', 'AMIInfo')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS LandInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Lease Information]

   PROCEDURE CLICK
      DO CASE
         CASE m.goapp.lEnhancedLand AND m.goapp.lDocuments
            m.goStateManager.OpenFormMulti('lmleaseinfod.scx')
         CASE m.goapp.lEnhancedLand
            m.goStateManager.OpenFormMulti('lmleaseinfod.scx')
         CASE m.goapp.lDocuments
            m.goStateManager.OpenFormMulti('lmlandinfod.scx')
         OTHERWISE
            m.goStateManager.OpenFormMulti('lmlandinfod.scx')
      ENDCASE

   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS LeaseOwners AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Lease \<Obligations]
   cOnClickCommand = [m.gostatemanager.openformmulti('lmlandowner.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS Formations AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Formations]
   cOnClickCommand = [m.goStateManager.openformmulti('lmformations.scx')]
   cSkipFor        = [NOT m.goApp.lEnhancedLand]
ENDDEFINE

*===============================================================================
DEFINE CLASS AMIInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<AMI Information]
   cOnClickCommand = [m.goStateManager.openformmulti('lmamiinfo.scx')]
   cSkipFor        = [NOT m.goApp.lEnhancedLand]
ENDDEFINE

*===============================================================================
DEFINE CLASS InvestmentFiles AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [Investment Files]
   cPopupName = [InvestmentFiles]
   cSkipFor   = [not m.goapp.lInvestData]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('Fields', '', 'Fields')
         .AddBar('Investments', '', 'Investments')
         .AddBar('DeplSetup', '', 'DeplSetup')
         .AddBar('DeplPcts', '', 'DeplPcts')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS FIELDS AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Field Information]
   cOnClickCommand = [m.gostatemanager.openformmulti('imfields.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS Investments AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Investment/Payout Information]
   cOnClickCommand = [m.gostatemanager.openformmulti('iminvestment.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS DeplSetup AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Depletion Setup]
   cOnClickCommand = [m.gostatemanager.openformmulti('imdeplset.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS DeplPcts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Depletion \<Pcts]
   cOnClickCommand = [m.gostatemanager.openformmulti('imdeplpct.scx')]
ENDDEFINE
*===============================================================================
DEFINE CLASS AFEFiles AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [\<AFE Files]
   cPopupName = [AFEMainten]
   cSkipFor   = [not m.goapp.lafeopt and not m.goapp.lafepriv]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('AFEMaint', '', 'AFEMaint')
         .AddBar('AFECopy', '', 'AFECopy')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS AFEMaint AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<AFE Maintenance]
   cOnClickCommand = [m.gostatemanager.openformmulti('afemaint.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS AFECopy AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Copy AFE]
   cOnClickCommand = [m.gostatemanager.openformmulti('afecopy.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS BrineFiles AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Brine Ha\<uler Files]
   cSkipFor = [NOT m.goApp.lBrineOpt or NOT m.goApp.lBrinedata]

   PROCEDURE AddBars
      WITH THIS
         IF FILE(m.goapp.cCommonFolder + 'p18.txt')
            .AddBar('P18Properties', '', 'P18Properties')
            .AddBar('P18GatheringSys', '', 'P18GatheringSys')
            .AddBar('P18FormP1', '', 'P18FormP1')
         ELSE
            .AddBar('BrineLeases', '', 'BrineLeases')
            .AddBar('DisposalSites', '', 'DisposalSites')
         ENDIF
         .AddBar('Trucks', '', 'Trucks')
         IF m.goapp.lQBVersion
            .AddBar('BillingCodes', '', 'BillingCodes')
            .AddBar('CustomerInfo', '', 'CustomerInfo')
         ENDIF
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS BrineLeases AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<Brine Pickup Wells]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('bmleases.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS P18Properties AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<Producing Properties]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('p18Properties.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS DisposalSites AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<Disposal Sites]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('bmdispsite.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS P18GatheringSys AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<Gathering Systems]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('p18GatheringSys.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS P18FormP1 AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [P18 Forms]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('p18FormP1.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Trucks AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<Trucks]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('bmtrucks.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS HouseGasOwners AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [House Gas \<Owners]
   cOnClickCommand = [m.goStateManager.openformmulti('dmgasown.scx')]
   cSkipFor        = [NOT m.goapp.lhousegasopt or not m.goapp.lhousegasdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS PluggingModule AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Pl\<ugging Module]
   cSkipFor = [not m.goapp.lPluggingModule]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('PluggingTargets', '', 'PluggingTargets')
         .AddBar('PluggingAdj', '', 'PluggingAdj')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS PluggingTargets AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Plugging \<Fund Well Targets]
   cOnClickCommand = [m.gostatemanager.openformmulti('plugwell.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS PluggingAdj AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Plugging Fund Balance Adjustments]
   cOnClickCommand = [m.gostatemanager.openformmulti('plugwellbal.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS FixedAssetInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Fi\<xed Asset Information]
   cOnClickCommand = [m.gostatemanager.openformmulti('glassets.scx')]
   cSkipFor        = [NOT m.goApp.lGLdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS BillingCodes AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Inventory/\<Billing Codes]
   cOnClickCommand = [m.gostatemanager.openformmulti('aritems.scx')]
   cSkipFor        = [NOT m.goApp.lARdata and not m.goapp.lbrinedata]
ENDDEFINE

*===============================================================================
DEFINE CLASS GLDeptInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Depa\<rtment Information]
   cOnClickCommand = [m.gostatemanager.openformmulti('gldept.scx')]
   cSkipFor        = [NOT m.goApp.lGLdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS FinanceChargeCodes AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Finance Charge Codes]
   cOnClickCommand = [m.gostatemanager.openformmulti('arfinchg.scx')]
   cSkipFor        = [NOT m.goApp.lARdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS MICRData AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [MICR Bank Info]
   cOnClickCommand = [m.gostatemanager.openformmulti('micrdataupd.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS TermsCodes AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Terms Codes]
   cOnClickCommand = [m.gostatemanager.openformmulti('glterms.scx')]
   cSkipFor        = [NOT m.goApp.lARdata and not m.goapp.lAPData]
ENDDEFINE

*===============================================================================
DEFINE CLASS SalesTaxCodes AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Sales Tax Codes]
   cOnClickCommand = [m.gostatemanager.openformmulti('arsalestx.scx')]
   cSkipFor        = [NOT m.goApp.lARdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS PayrollCodes AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Payroll Codes]
   cSkipFor = [not m.goapp.lpayrollopt or NOT m.goApp.lPayrolldata or m.goapp.lReadOnly]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('PRIncomeCodes', '', 'PRIncomeCodes')
         .AddBar('PRDeductionCodes', '', 'PRDeductionCodes')
         .AddBar('PRTaxCodes', '', 'PRTaxCodes')
         .AddSeparatorBar()
         .AddBar('PRSUTACodes', '', 'PRSUTACodes')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS PRIncomeCodes AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Payroll \<Income Codes]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('princupd.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS PRDeductionCodes AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Payroll \<Deduction Codes]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('prdedupd.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS PRTaxCodes AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Payroll \<Taxes]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('prtaxupd.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS PRSUTACodes AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [State \<Unemployment Codes]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('prsuta.scx')
   ENDPROC
ENDDEFINE

*!* 2025-01-12 - Chris Cantrell - Moved to Utilities
*!*   *===============================================================================
*!*   DEFINE CLASS AddressNormalization AS SFBar OF SFMenu.vcx
*!*   *===============================================================================
*!*      cCaption      = [Address Normalization]
*!*      PROCEDURE CLICK
*!*         m.goStateManager.OpenFormMulti('normaddr.scx')
*!*      ENDPROC
*!*   ENDDEFINE

*===============================================================================
*===============================================================================
*===============================================================================
DEFINE CLASS Tasks AS SFPad OF SFMenu.vcx
*===============================================================================
*===============================================================================
*===============================================================================
   cCaption   = [\<Tasks]
   cKey       = [ALT+T]
   cPopupName = [Tasks]
   cSkipFor   = [not m.goapp.lopencompany or m.goApp.lExpired]

   PROCEDURE AddBars
      WITH THIS

         IF m.goapp.lAMVersion
            .AddBar('SalesInvoicing', '', 'SalesInvoicing')
            .AddBar('ReceivePayments', '', 'ReceivePayments')
            .AddBar('GenFinanceChgs', '', 'GenFinanceChgs')
            .AddSeparatorBar()
         ENDIF

         .AddBar('CashReceipts', '', 'CashReceipts')
         
         IF m.goapp.lAMVersion
            .AddBar('CashDisbursements', '', 'CashDisbursements')
         ENDIF

         IF NOT m.goapp.lAMVersion
            .AddBar('WellRevenue', '', 'WellRevenue')
            .AddBar('GasMeterRecon', '', 'GasMeterRecon')
            .AddBar('AllocateRevenue', '', 'AllocateRevenue')
            .AddBar('StatementNotes', '', 'StatementNotes')
            IF m.goapp.lPartnershipMod
               .AddBar('SettlementNotes', '', 'SettlementNotes')
            ENDIF
         ENDIF

         .AddSeparatorBar()
         .AddBar('CheckProcessing', '', 'CheckProcessing')

         IF m.goapp.lAMVersion
            .AddSeparatorBar()
            .AddBar('DisbJIBTasks', '', 'DisbJIBTasks')
         ENDIF

         .AddSeparatorBar()

         .AddBar('EnterBills', '', 'EnterBills')

         IF m.goapp.lAMVersion
            .AddBar('PurchaseInventory', '', 'PurchaseInventory')
            .AddBar('TransferInventory', '', 'TransferInventory')
         ENDIF

         IF NOT m.goapp.lQBVersion
            .AddBar('PayBills', '', 'PayBills')
         ENDIF

         IF NOT m.goapp.lAMVersion
            .AddBar('WellExpenses', '', 'WellExpenses')
            .AddBar('FixedExpRelPct', '', 'FixedExpRelPct')

            IF m.goapp.lPluggingModule
               .AddBar('PluggingRel', '', 'PluggingRel')
            ENDIF

            .AddBar('AllocateExpensesEvenly', '', 'AllocateExpensesEvenly')
            .AddBar('AllocateExpenses', '', 'AllocateExpenses')
            .AddSeparatorBar()

            IF m.goapp.lQBVersion
               .AddBar('RecNetPaymentsQB', '', 'RecNetPaymentsQB')
            ELSE
               .AddBar('RecNetPayments', '', 'RecNetPayments')
               .AddBar('RecJIBPayments', '', 'RecJIBPayments')
            ENDIF

            IF NOT m.goapp.lQBVersion AND m.goapp.lHouseGasOpt
               .AddBar('RecHGPayments', '', 'RecHGPayments')
            ENDIF

            .AddBar('RecPrepayments', '', 'RecPrepayments')
         ENDIF


         IF m.goapp.lLandOpt
            .AddSeparatorBar()
            .AddBar('DelayRentalChecks', '', 'DelayRentalChecks')
         ENDIF

         IF m.goapp.lHouseGasOpt
            .AddBar('HouseGasTasks', '', 'HouseGasTasks')
         ENDIF

         IF m.goapp.lBrineOpt
            .AddBar('BrineWorkOrder', '', 'BrineWorkOrder')
         ENDIF

         IF m.goapp.lprogopt AND m.goapp.lpartnerdata AND m.goapp.lAMVersion
            .AddBar('ProgramDist', '', 'ProgramDist')
         ENDIF

         IF m.goapp.lImportModule
            .AddSeparatorBar()
            .AddBar('DataImports', '', 'DataImports')
            .AddBar('MeterImports', '', 'MeterImports')
         ENDIF

         IF m.goapp.lAMVersion
            .AddSeparatorBar()
            .AddBar('GLJourn', '', 'GLJourn')
         ENDIF

         IF NOT m.goapp.lAMVersion
            .AddSeparatorBar()
            .AddBar('RecurringBillInfo', '', 'RecurringBillInfo')
         ELSE
            .AddSeparatorBar()
            .AddBar('RecurringTrans', '', 'RecurringTrans')
            IF m.goapp.lPayrollOpt AND m.goapp.lpayrolldata
               .AddSeparatorBar()
               .AddBar('PayrollProcessing', '', 'PayrollProcessing')
            ENDIF
         ENDIF

         .AddSeparatorBar()
         .AddBar('CloseRevRun', '', 'CloseRevRun')
         .AddBar('CloseJIBRun', '', 'CloseJIBRun')

         IF m.goapp.lQBVersion
            .AddSeparatorBar()
            .AddBar('PostToQB', '', 'PostToQB')
         ENDIF

         IF m.goapp.lPartnershipMod
            .AddSeparatorBar()
            .AddBar('PartnerPost', '', 'PartnerPost')
         ENDIF

         IF m.goapp.lAMVersion
            .AddSeparatorBar()
            .AddBar('CloseFiscalPeriod', '', 'CloseFiscalPeriod')
         ENDIF

      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Banking_TransferPayments AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [Transfers and Payments]
   cPopupName = [Banking_TransfersPayments]

   PROCEDURE AddBars
      WITH THIS
         IF m.goapp.lAMVersion
            .AddBar('Banking_NewBankTransfer', '', 'Banking_NewBankTransfer')
            .AddBar('Banking_ViewBankTransfer', '', 'Banking_ViewBankTransfer')
            .AddBar('Banking_NewCashExpenses', '', 'Banking_NewCashExpenses')		&& Cash Expense
         ENDIF
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Banking_NewBankTransfer AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Add New Bank Transfers]
   cOnClickCommand = [m.gostatemanager.openformmulti('cstransfer.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS Banking_ViewBankTransfer AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [View Existing Bank Transfers]
   cOnClickCommand = [m.gostatemanager.openformmulti('cstransferview.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS Banking_NewCashExpenses AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [New Cash Expense]
   cOnClickCommand = [m.gostatemanager.openformmulti('csexpense.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS Banking_PosPay AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Build Positive Pay File]
   cOnClickCommand = [m.gostatemanager.openformmulti('cspospay2.scx')]
ENDDEFINE


*AM
*===============================================================================
DEFINE CLASS SalesInvoicing AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Sales Invoicing]
   cOnClickCommand = [m.gostatemanager.openformmulti('arinv.scx')]
   cSkipFor        = [not m.goapp.lardata]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS ReceivePayments AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [\<Receive Payments]
   cPopupName = [ReceivePayments]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('RecCustPayments', '', 'RecCustPayments')
         .AddBar('RecJIBPayments', '', 'RecJIBPayments')
         .AddBar('RecNetPayments', '', 'RecNetPayments')

         IF m.goapp.lHouseGasOpt
            .AddBar('RecHGPayments', '', 'RecHGPayments')
         ENDIF

         .AddBar('RecPrepayments', '', 'RecPrepayments')
      ENDWITH
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS RecCustPayments AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Customer Payments]
   cOnClickCommand = [m.gostatemanager.openformmulti('arrecpmt.scx','AR')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS RecNetPayments AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Receive \<Owner Net Payments]
   cOnClickCommand = [m.gostatemanager.openformmulti('arrecpmt.scx','NET')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS RecNetPaymentsQB AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Receive \<Owner Net Payments]
   cOnClickCommand = [m.gostatemanager.openformmulti('arrecpmt.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS RecJIBPayments AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Receive \<JIB Payments]
   cOnClickCommand = [m.gostatemanager.openformmulti('arrecpmt.scx','JIB')]
   cSkipFor        = [not m.goapp.ljibdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS RecHGPayments AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Receive \<House Gas Payments]
   cOnClickCommand = [m.gostatemanager.openformmulti('arrecpmt.scx','HG')]
   cSkipFor        = [not m.goapp.lhousegasdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS RecPrepayments AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Receive O\<wner Prepayments]
   cSkipFor = [not m.goapp.lrevdistdata]

   PROCEDURE CLICK
      IF m.goapp.lQBVersion
         m.goStateManager.OpenFormMulti('dmprepayqb.scx')
      ELSE
         m.goStateManager.OpenFormMulti('dmprepay.scx')
      ENDIF

   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS GenFinanceChgs AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Generate Finance Charges]
   cOnClickCommand = [m.gostatemanager.openformmulti('arfingen.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS CashReceipts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Cas\<h/Production Receipts]
   cOnClickCommand = [m.gostatemanager.openformmulti('csreceipt.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS CashDisbursements AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Cash \<Disbursements]
   cOnClickCommand = [m.gostatemanager.openformmulti('csdisb.scx')]
   cSkipFor        = [not m.goapp.lcashdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS MakeDeposits AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Make Deposits]
   cOnClickCommand = [m.gostatemanager.openformmulti('csdeposit.scx')]
   cSkipFor        = [not m.goapp.lcashdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS ReconcileBankAccts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Reconcile Bank \<Accounts]
   cOnClickCommand = [m.gostatemanager.openformmulti('csrecond.scx')]
   cSkipFor        = [not m.goapp.lcashdata]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS GLJourn AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<General Journal Entries]
   cOnClickCommand = [m.gostatemanager.openformmulti('gljourn.scx')]
   cSkipFor        = [not m.goapp.lgldata]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS RecurringTrans AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [Recurring Tra\<nsactions]
   cPopupName = [ReceivePayments]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('RecurringBillInfo', '', 'RecurringBillInfo')
         .AddBar('RecurringAR', '', 'RecurringAR')
         .AddBar('RecurringGL', '', 'RecurringGL')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS RecurringBillInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [R\<ecurring A/P Bills]
   cOnClickCommand = [m.goStateManager.openformmulti('aprecur.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS RecurringAR AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Recurring \<Invoices]
   cOnClickCommand = [m.gostatemanager.openformmulti('arrecur.scx')]
   cSkipFor        = [not m.goapp.lardata]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS RecurringGL AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Recurring G/L \<Journal Entries]
   cOnClickCommand = [m.gostatemanager.openformmulti('glrecur.scx')]
   cSkipFor        = [not m.goapp.lgldata]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS PayrollProcessing AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Pa\<yroll Processing]
   cSkipFor = [NOT m.goApp.lPayrolldata or not m.goapp.lpayrollopt or m.goapp.lReadOnly]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('EnterPayroll', '', 'EnterPayroll')
         .AddBar('PrintPRJournal', '', 'PrintPRJournal')
      ENDWITH
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS EnterPayroll AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<Enter Payroll]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('prinput1.scx')
   ENDPROC

ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS PrintPRJournal AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Print Payroll \<Journal]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('prjournrpt.scx')
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
*===============================================================================
DEFINE CLASS DisbJIBTasks AS SFBar OF SFMenu.vcx
*===============================================================================
*===============================================================================
   cCaption   = [Disbursement and JIB \<Tasks]
   cSkipFor   = [not m.goapp.lrevdistdata]
   cPopupName = [DisbJIBTasks]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('WellRevenue', '', 'WellRevenue')
         .AddBar('GasMeterRecon', '', 'GasMeterRecon')
         .AddBar('AllocateRevenue', '', 'AllocateRevenue')
         .AddBar('StatementNotes', '', 'StatementNotes')
         .AddSeparatorBar()
         .AddBar('WellExpenses', '', 'WellExpenses')

         .AddBar('FixedExpRelPct', '', 'FixedExpRelPct')

         IF m.goapp.lPluggingModule
            .AddBar('PluggingRel', '', 'PluggingRel')
         ENDIF

         .AddBar('AllocateExpensesEvenly', '', 'AllocateExpensesEvenly')
         .AddBar('AllocateExpenses', '', 'AllocateExpenses')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS WellRevenue AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Well \<Revenue by Well (8/8ths)]
   cSkipFor = [not m.goapp.lrevdistdata]

   PROCEDURE CLICK
      IF NOT m.goapp.lQBVersion
         m.goStateManager.OpenFormMulti('dmwellrev.scx')
      ELSE
         m.goStateManager.OpenFormMulti('dmwellinc1.scx')
      ENDIF
   ENDPROC

ENDDEFINE

*===============================================================================
DEFINE CLASS GasMeterRecon AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Gas Meter Reconciliation]
   cOnClickCommand = [m.gostatemanager.openformmulti('dmmeterall.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS AllocateRevenue AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Allocate Held Re\<venue]
   cOnClickCommand = [m.goStateManager.openformmulti('dmselrev.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS StatementNotes AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Enter Statement \<Notes]
   cOnClickCommand = [m.goStateManager.openformmulti('dmstmtnotes.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS SettlementNotes AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Settlement Statement \<Notes]
   cOnClickCommand = [m.goStateManager.openformmulti('dmsettlenotes.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE
*===============================================================================
DEFINE CLASS EnterBills AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Enter \<Bills]
   cOnClickCommand = [m.gostatemanager.openformmulti('apbill.scx')]
   cSkipFor        = [NOT m.goApp.lAPdata and not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS EnterBillsNew AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Enter \<Bills]
   cOnClickCommand = [m.gostatemanager.openformmulti('apbillnew.scx')]
   cSkipFor        = [NOT m.goApp.lAPdata and not m.goapp.lrevdistdata]
ENDDEFINE


*AM
*===============================================================================
DEFINE CLASS PurchaseInventory AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Purchase In\<ventory Items]
   cOnClickCommand = [m.gostatemanager.openformmulti('apbill2.scx')]
   cSkipFor        = [NOT m.goApp.lAPdata and not m.goapp.lardata]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS PayBills AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Pay Bills]
   cOnClickCommand = [m.gostatemanager.openformmulti('apbillpay.scx')]
   cSkipFor        = [NOT m.goApp.lAPdata]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS TransferInventory AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Transfer Inventory to \<Wells]
   cOnClickCommand = [m.gostatemanager.openformmulti('dminvtrans.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata and not m.goapp.ljibdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS WellExpenses AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Well \<Expenses by Well (8/8ths)]
   cSkipFor = [not m.goapp.lrevdistdata]

   PROCEDURE CLICK

      IF m.goapp.lQBVersion
         m.goStateManager.OpenFormMulti('dmwellexpense.scx')
      ELSE
         m.goStateManager.OpenFormMulti('dmwellexp.scx')
      ENDIF

   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS FixedExpRel AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Release \<Recurring Well Expenses]
   cOnClickCommand = [m.goStateManager.openformmulti('dmfixrel.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS FixedExpRelPct AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Release \<Recurring Well Expenses]
   cOnClickCommand = [m.goStateManager.openformmulti('dmfixrelpct.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS PluggingRel AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Release \<Plugging Fund Charges]
   cOnClickCommand = [m.gostatemanager.openformmulti('pluggingrel.scx')]
   cSkipFor        = [not m.goapp.lPluggingModule]
ENDDEFINE

*===============================================================================
DEFINE CLASS AllocateExpensesEvenly AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Allocate Operator-Charged Expe\<nses Evenly]
   cOnClickCommand = [m.goStateManager.openformmulti('dmexpall.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS AllocateExpenses AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Allocate Held Expenses]
   cOnClickCommand = [m.goStateManager.openformmulti('dmselexp.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS CheckProcessing AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [Banking - Chec\<k Processing]
   cSkipFor   = [not m.goapp.lrevdistdata]
   cPopupName = [CheckProcessing]

   PROCEDURE AddBars
      WITH THIS
         IF m.goapp.lAMVersion
            .AddBar('MakeDeposits', '', 'MakeDeposits')
         ENDIF     
         IF NOT m.goapp.lQBVersion
            .AddBar('ReconcileBankAccts', '', 'ReconcileBankAccts')
            .AddSeparatorBar()
         ENDIF

         .AddBar('PrintChecks', '', 'PrintChecks')
         
         IF FILE(m.goapp.cdatafilepath + [PivotenCheck.ini])
            .AddBar('VirtualCheckPrinting', '', 'VirtualCheckPrinting')
         ENDIF
         
         IF m.goapp.lAMVersion
            .AddBar('VoidReissue', '', 'VoidReissue')
         ENDIF
         
         .AddSeparatorBar()
         .AddBar('CheckRegister', '', 'CheckRegister')
         
         IF m.goapp.lAMVersion
            .AddSeparatorBar()
            .AddBar('Banking_NewBankTransfer', '', 'Banking_NewBankTransfer')
            .AddBar('Banking_ViewBankTransfer', '', 'Banking_ViewBankTransfer')
            .AddBar('Banking_NewCashExpenses', '', 'Banking_NewCashExpenses')		&& Cash Expense
            .AddSeparatorBar()
            .AddBar('Banking_PosPay', '', 'Banking_PosPay')            
         ENDIF

         
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS CheckRegister AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [View Registers]
   cOnClickCommand = [m.gostatemanager.openformmulti('csregister.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS PrintChecks AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Print Checks]
   cOnClickCommand = [m.gostatemanager.openformmulti('cschecks.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS VoidReissue AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Void/Reissue Checks]
   cOnClickCommand = [m.gostatemanager.openformmulti('csvoidreissue.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS DelayRentalChecks AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Create Dela\<y Rental Checks]
   cOnClickCommand = [m.gostatemanager.openformmulti('lmlandchk.scx')]
   cSkipFor        = [not m.goapp.llandopt or not m.goapp.llanddata]
ENDDEFINE

*===============================================================================
DEFINE CLASS VirtualCheckPrinting AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [eCheck Printing]
   cOnClickCommand = [m.gostatemanager.openformmulti('cschkpg.scx')]
   cSkipFor        = [not FILE(m.goApp.cdatafilepath + 'PivotenCheck.ini')]
ENDDEFINE

*===============================================================================
DEFINE CLASS HouseGasTasks AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [House Gas Tasks]
   cPopupName = [HGTasks]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('HouseGasMeterEntry', '', 'HouseGasMeterEntry')
         .AddBar('HouseGasUsageAdj', '', 'HouseGasUsageAdj')
         IF m.goapp.lAMVersion
            .AddBar('ImportHG', '', 'ImportHG')
         ENDIF
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS HouseGasMeterEntry AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Ho\<use Gas Meter Entry]
   cOnClickCommand = [m.gostatemanager.openformmulti('dmgasuse.scx')]
   cSkipFor        = [NOT m.goapp.lhousegasopt or not m.goapp.lhousegasdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS HouseGasUsageAdj AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Usage Adjustments]
   cOnClickCommand = [m.gostatemanager.openformmulti('dmgasbaladj.scx')]
   cSkipFor        = [NOT m.goapp.lhousegasopt or not m.goapp.lhousegasdata]
ENDDEFINE

*===============================================================================
DEFINE CLASS CloseRevRun AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Close a Revenue Run]
   cOnClickCommand = [m.gostatemanager.openformmulti('dmcloserev.scx')]
   cSkipFor        = [not m.goapp.lrevdistdata or m.goapp.lReadOnly]
ENDDEFINE

*===============================================================================
DEFINE CLASS CloseJIBRun AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Close a \<JIB Run]
   cOnClickCommand = [m.gostatemanager.openformmulti('dmclosejib.scx')]
   cSkipFor        = [not m.goapp.ljibdata or m.goapp.lReadonly]
ENDDEFINE

*===============================================================================
DEFINE CLASS PartnerPost AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Import Incoming Partnership Receipts]
   cOnClickCommand = [m.goApp.PartnerPost(.T.)]
ENDDEFINE

*===============================================================================
DEFINE CLASS EnergyLinkTasks AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [EnergyLink Processing]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('EnergyLinkVendorID', '', 'EnergyLinkVendorID')
         .AddBar('EnergyLinkOperID', '', 'EnergyLinkOperID')
         .AddSeparatorBar()
         .AddBar('EnergyLinkPost', '', 'EnergyLinkPost')
      ENDWITH
   ENDPROC
ENDDEFINE


*===============================================================================
DEFINE CLASS EnergyLinkPost AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Download and Post from EnergyLink]
   cOnClickCommand = [m.gostatemanager.openformmulti('elpostform.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS EnergyLinkVendorID AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [EnergyLink/Vendor Cross Reference]
   cOnClickCommand = [m.gostatemanager.openformmulti('elvendorid.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS EnergyLinkOperID AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [EnergyLink/Operator Cross Reference]
   cOnClickCommand = [m.gostatemanager.openformmulti('eloperid.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS CloseFiscalPeriod AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Close a \<Fiscal Accounting Period]
   cOnClickCommand = [m.gostatemanager.openformmulti('glcloseprd.scx')]
   cSkipFor        = [not m.goapp.lgldata or m.goapp.lReadonly]
ENDDEFINE

*QB
*===============================================================================
DEFINE CLASS PostToQB AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Post a Revenue Run To \<QuickBooks]
   cSkipFor = [not m.goapp.oQB.lqbactive or not m.goapp.lrevdistdata]

   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('dmqbpostr.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS DataImports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [Data Imports]
   cSkipFor   = [not m.goApp.lImportModule]
   cPopupName = [DataImports]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('ImportRevExp', '', 'ImportRevExp')
         .AddBar('ImportDataFiles', '', 'ImportDataFiles')
         .AddSeparatorBar()
         .AddBar('ImportMapping', '', 'ImportMapping')
         .AddBar('CopyImportMapping', '', 'CopyImportMapping')
         .AddBar('ProductMapping', '', 'ProductMapping')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS MeterImports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [Meter Imports]
   cSkipFor   = [not m.goApp.lImportModule]
   cPopupName = [MeterImports]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('ImportCharts', '', 'ImportCharts')
         .AddBar('DeleteCharts', '', 'DeleteCharts')
         .AddBar('ImportPayMeters', '', 'ImportPayMeters')
         .AddBar('DeletePayMeters', '', 'DeletePayMeters')
         .AddSeparatorBar()
         .AddBar('IntegratorMap', '', 'IntegratorMap')
         .AddBar('PurchaserMap', '', 'PurchaserMap')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS ImportCharts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Import Chart Readings]
   cOnClickCommand = [m.gostatemanager.openformmulti('meterchartimport.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS DeleteCharts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Delete Chart Readings]
   cOnClickCommand = [m.gostatemanager.openformmulti('meterchartdel.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ImportPayMeters AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Import Pay Meters]
   cOnClickCommand = [m.gostatemanager.openformmulti('meterpayimport.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS DeletePayMeters AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Delete Pay Meter Imports]
   cOnClickCommand = [m.gostatemanager.openformmulti('meterpaydel.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS IntegratorMap AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Setup Chart Integrator Mapping]
   cOnClickCommand = [m.gostatemanager.openformmulti('meterintegrators.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS PurchaserMap AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Setup Purchaser Mapping]
   cOnClickCommand = [m.gostatemanager.openformmulti('meterpurchmap.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ImportRevExp AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [Import Receipts, Bills]
   cPopupName = [ImportRevExp]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('ImportReceipts', '', 'ImportReceipts')
         .AddBar('ImportRevDel', '', 'ImportRevDel')
         .AddSeparatorBar()
         .AddBar('ImportBills', '', 'ImportBills')
         .AddBar('ImportExpDel', '', 'ImportExpDel')
         .AddSeparatorBar()
         .AddBar('ImportHist', '', 'ImportHist')

         IF m.goapp.lAMVersion
            .AddSeparatorBar()
            .AddBar('ImportGLEntries', '', 'ImportGLEntries')
         ENDIF

      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS ImportReceipts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Import Receipts]
   cOnClickCommand = [m.gostatemanager.openformmulti('importrev.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ImportBills AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Import Bills]
   cOnClickCommand = [m.goStateManager.openformmulti('importexp.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ImportGLEntries AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Import G/L Entries]
   cOnClickCommand = [m.goStateManager.openformmulti('importdata.scx','GL')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ImportHist AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Receipt/Bill History Reports]
   cOnClickCommand = [m.goStateManager.openformmulti('importhist.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ImportHG AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [Import House Gas Readings]
   cSkipFor   = [not m.goApp.lImportModule]
   cPopupName = [ImportHG]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('HouseGasReadings', '', 'HouseGasReadings')
         .AddBar('DelHouseGasReadings', '', 'DelHouseGasReadings')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS HouseGasReadings AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Import House Gas Meter Readings]
   cOnClickCommand = [m.goStateManager.openformmulti('hggasimport.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS DelHouseGasReadings AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Delete House Gas Meter Readings]
   cOnClickCommand = [m.goStateManager.openformmulti('hgdelimport.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ImportDataFiles AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [Import Data Files]
   cPopupName = [ImportData]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('ImportWells', '', 'ImportWells')
         .AddBar('ImportOwners', '', 'ImportOwners')
         .AddBar('ImportDOI', '', 'ImportDOI')
         .AddBar('ImportPurchasers', '', 'ImportPurchasers')
         .AddBar('ImportExpCodes', '', 'ImportExpCodes')
         .AddBar('ImportLeases', '', 'ImportLeases')
         .AddBar('ImportMasterMeters', '', 'ImportMasterMeters')
         .AddBar('ImportPumpers', '', 'ImportPumpers')

         IF m.goapp.lAMVersion OR m.goapp.lDMVersion
            .AddBar('ImportVendors', '', 'ImportVendors')
         ENDIF

         IF m.goapp.lAMVersion
            .AddBar('ImportCusts', '', 'ImportCusts')
            .AddBar('ImportAccounts', '', 'ImportAccounts')
         ENDIF

      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS ImportWells AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Import Wells]
   cOnClickCommand = [m.goStateManager.openformmulti('importdata.scx','WELL')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ImportOwners AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Import Owners]
   cOnClickCommand = [m.goStateManager.openformmulti('importdata.scx','OWN')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ImportDOI AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Import DOI]
   cOnClickCommand = [m.goStateManager.openformmulti('importdata.scx','DOI')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ImportPurchasers AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Import Purchasers]
   cOnClickCommand = [m.goStateManager.openformmulti('importdata.scx','PURCH')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ImportExpCodes AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Import Expense Codes]
   cOnClickCommand = [m.goStateManager.openformmulti('importdata.scx','ECAT')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ImportLeases AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Import Leases]
   cOnClickCommand = [m.goStatemanager.openformmulti('importdata.scx','LSE')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ImportPumpers AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Import Pumpers]
   cOnClickCommand = [m.goStatemanager.openformmulti('importdata.scx','PUMP')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ImportMasterMeters AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Import Master Meters]
   cOnClickCommand = [m.goStatemanager.openformmulti('importdata.scx','METER')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS ImportCusts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Import Customers]
   cOnClickCommand = [m.goStatemanager.openformmulti('importdata.scx','CUST')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS ImportVendors AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Import Vendors]
   cOnClickCommand = [m.goStatemanager.openformmulti('importdata.scx','VEND')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS ImportAccounts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Import Accounts]
   cOnClickCommand = [m.goStatemanager.openformmulti('importdata.scx','COA')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ImportMapping AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [Import Mapping]
   cSkipFor   = [not m.goApp.lImportModule]
   cPopupName = [ImportMapping]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('RevenueImportMaps', '', 'RevenueImportMaps')
         .AddBar('ExpenseImportMaps', '', 'ExpenseImportMaps')
         .AddSeparatorBar()
         .AddBar('WellImportMaps', '', 'WellImportMaps')
         .AddBar('OwnerImportMaps', '', 'OwnerImportMaps')
         .AddBar('DOIImportMaps', '', 'DOIImportMaps')
         .AddBar('PurchaserImportMaps', '', 'PurchaserImportMaps')
         .AddBar('ExpCodeImportMaps', '', 'ExpCodeImportMaps')
         .AddBar('LeaseImportMaps', '', 'LeaseImportMaps')
         .AddBar('MeterImportMaps', '', 'MeterImportMaps')
         .AddBar('PumperImportMaps', '', 'PumperImportMaps')
         IF m.goapp.lAMVersion
            .AddBar('CustImportMaps', '', 'CustImportMaps')
         ENDIF
         IF m.goapp.lAMVersion OR m.goapp.lDMVersion
            .AddBar('VendorImportMaps', '', 'VendorImportMaps')
         ENDIF
         IF m.goapp.lAMVersion
            .AddBar('COAImportMaps', '', 'COAImportMaps')
         ENDIF
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS RevenueImportMaps AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Revenue Import Maps]
   cOnClickCommand = [m.goStatemanager.openformmulti('importrev_map.scx','')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ExpenseImportMaps AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Expense Import Maps]
   cOnClickCommand = [m.goStatemanager.openformmulti('importexp_map.scx','')]
ENDDEFINE

*===============================================================================
DEFINE CLASS WellImportMaps AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Well Import Maps]
   cOnClickCommand = [m.goStatemanager.openformmulti('import_map.scx','WELL')]
ENDDEFINE

*===============================================================================
DEFINE CLASS OwnerImportMaps AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Owner Import Maps]
   cOnClickCommand = [m.goStatemanager.openformmulti('import_map.scx','OWN')]
ENDDEFINE

*===============================================================================
DEFINE CLASS DOIImportMaps AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [DOI Import Maps]
   cOnClickCommand = [m.goStatemanager.openformmulti('import_map.scx','DOI')]
ENDDEFINE

*===============================================================================
DEFINE CLASS PurchaserImportMaps AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Purchaser Import Maps]
   cOnClickCommand = [m.goStatemanager.openformmulti('import_map.scx','PURCH')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ExpCodeImportMaps AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Expense Code Import Maps]
   cOnClickCommand = [m.goStatemanager.openformmulti('import_map.scx','ECAT')]
ENDDEFINE

*===============================================================================
DEFINE CLASS LeaseImportMaps AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Lease Import Maps]
   cOnClickCommand = [m.goStatemanager.openformmulti('import_map.scx','LSE')]
ENDDEFINE

*===============================================================================
DEFINE CLASS PumperImportMaps AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Pumper Import Maps]
   cOnClickCommand = [m.goStatemanager.openformmulti('import_map.scx','PUMP')]
ENDDEFINE

*===============================================================================
DEFINE CLASS MeterImportMaps AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Meter Import Maps]
   cOnClickCommand = [m.goStatemanager.openformmulti('import_map.scx','METER')]
ENDDEFINE

*===============================================================================
DEFINE CLASS CustImportMaps AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Customer Import Maps]
   cOnClickCommand = [m.goStatemanager.openformmulti('import_map.scx','CUST')]
ENDDEFINE

*===============================================================================
DEFINE CLASS VendorImportMaps AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Lease Import Maps]
   cOnClickCommand = [m.goStatemanager.openformmulti('import_map.scx','VEND')]
ENDDEFINE

*===============================================================================
DEFINE CLASS COAImportMaps AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Chart of Accounts Import Maps]
   cOnClickCommand = [m.goStatemanager.openformmulti('import_map.scx','COA')]
ENDDEFINE

*===============================================================================
DEFINE CLASS CopyImportMapping AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Copy Import Mapping From Another Company]
   cOnClickCommand = [m.gostatemanager.openformmulti('importmapcopy.scx')]

ENDDEFINE

*===============================================================================
DEFINE CLASS ProductMapping AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Product and Expense Code Mapping]
   cOnClickCommand = [m.gostatemanager.openformmulti('importtypes.scx')]

ENDDEFINE

*===============================================================================
DEFINE CLASS ImportRevDel AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Delete Receipt Imports]
   cOnClickCommand = [m.gostatemanager.openformmulti('importrevdel.scx')]

ENDDEFINE

*===============================================================================
DEFINE CLASS ImportExpDel AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Delete Bill Imports]
   cOnClickCommand = [m.gostatemanager.openformmulti('importexpdel.scx')]

ENDDEFINE

*===============================================================================
DEFINE CLASS BrineWorkOrder AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption    = [Brine Work Orders]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('bminv.scx')
   ENDPROC

ENDDEFINE

*===============================================================================
DEFINE CLASS ProgramDist AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Program Distributions]
   cOnClickCommand = [m.gostatemanager.openformmulti('dmprogdist.scx')]

ENDDEFINE

*===============================================================================
*===============================================================================
*===============================================================================
DEFINE CLASS Reports AS SFPad OF SFMenu.vcx
*===============================================================================
*===============================================================================
*===============================================================================
   cCaption   = [\<Reports]
   cPopupName = [Reports]
   cSkipFor   = [not m.goapp.lopencompany or m.goApp.lExpired]

   PROCEDURE AddBars
      WITH THIS
         IF m.goapp.lAMVersion
            .AddBar('AR_Reports', '', 'AR_Reports')
            .AddBar('AP_Reports', '', 'AP_Reports')
            .AddBar('GL_Reports', '', 'GL_Reports')
            IF m.goapp.lPayrollOpt AND m.goapp.lpayrolldata
               .AddBar('PR_Reports', '', 'PR_Reports')
            ENDIF
            .AddSeparatorBar()
            .AddBar('CS_Reports', '', 'CS_Reports')
            .AddSeparatorBar()
         ENDIF

         .AddBar('WellReports', '', 'WellReports')
         .AddBar('OwnerReports', '', 'OwnerReports')
         .AddBar('ProgramReports', '', 'ProgramReports')
         .AddBar('SuspenseReports', '', 'SuspenseReports')

         IF m.goapp.lDMVersion
            .AddSeparatorBar()
            .AddBar('Vendor_Reports', '', 'Vendor_Reports')
         ENDIF

         IF NOT m.goapp.lAMVersion
            .AddSeparatorBar()
            .AddBar('CS_Reports', '', 'CS_Reports')
         ENDIF

         IF m.goapp.lAMVersion
            .AddSeparatorBar()
         ENDIF

         IF m.goapp.lLandOpt
            .AddBar('LandReports', '', 'LandReports')
         ENDIF

         IF m.goapp.lAFEOpt
            .AddBar('AFEReports', '', 'AFEReports')
         ENDIF

         .AddBar('InvestmentReports', '', 'InvestmentReports')

         IF m.goapp.lHouseGasOpt
            .AddBar('HouseGasReports', '', 'HouseGasReports')
         ENDIF

         IF m.goapp.lBrineOpt
            .AddBar('BrineReports', '', 'BrineReports')
         ENDIF

         IF m.goapp.lPluggingModule
            .AddBar('PluggingReports', '', 'PluggingReports')
         ENDIF

         .AddSeparatorBar()

         .AddBar('Ten99Menu', '', 'Ten99Menu')

         IF m.goapp.lK1Opt
            .AddBar('Process1065s', '', 'Process1065s')
         ENDIF

         .AddSeparatorBar()
         .AddBar('TaxReports', '', 'TaxReports')
         .AddBar('StateComplianceReports', '', 'StateComplianceReports')
         .AddSeparatorBar()

         IF m.goapp.lAMVersion
            .AddBar('Asset_Reports', '', 'Asset_Reports')
         ENDIF

         .AddBar('Graphing', '', 'Graphing')
         .AddBar('OtherReports', '', 'OtherReports')
         .AddSeparatorBar()
         .AddBar('DownloadReports', '', 'DownloadReports')
         .AddSeparatorBar()
         .AddBar('AdvancedReporting', '', 'AdvancedReporting')
      ENDWITH
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
*===============================================================================
DEFINE CLASS AR_Reports AS SFBar OF SFMenu.vcx
*===============================================================================
*===============================================================================
   cCaption   = [A/\<R Reports]
   cPopupName = [ARReports]
   cSkipFor   = [NOT m.goApp.lARreports]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('CustomerListing', '', 'CustomerListing')
         .AddBar('CustomerLabels', '', 'CustomerLabels')
         .AddSeparatorBar()
         .AddBar('AgedReceivableRpt', '', 'AgedReceivableRpt')
         .AddBar('InvoiceListing', '', 'InvoiceListing')
         .AddBar('InvoicesandPaymentsReports', '', 'InvoicesandPaymentsReports')
         .AddBar('PrintInvoices', '', 'PrintInvoices')
         .AddSeparatorBar()
         .AddBar('SalesJournRpt', '', 'SalesJournRpt')
         .AddBar('BillingCodeSummary', '', 'BillingCodeSummary')
         .AddBar('CustomerStatements', '', 'CustomerStatements')
      ENDWITH
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS CustomerListing AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Customer Listing]
   cOnClickCommand = [m.goStateManager.openformmulti('arcustrpt.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS CustomerLabels AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Customer \<Labels]
   cOnClickCommand = [m.goStateManager.openformmulti('arcustlab.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS AgedReceivableRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Aged Receivables Reports]
   cOnClickCommand = [m.goStateManager.openformmulti('araged.scx','A')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS InvoiceListing AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Invoice Listing]
   cOnClickCommand = [m.goStateManager.openformmulti('arinvlist.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS InvoicesandPaymentsReports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Invoices and Pa\<yments Report]
   cOnClickCommand = [m.goStateManager.openformmulti('arinvrpt.scx','A')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS PrintInvoices AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Print Invoices]
   cOnClickCommand = [m.goStateManager.openformmulti('arinvprint.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS SalesJournRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Sales Journal Reports]
   cOnClickCommand = [m.goStateManager.openformmulti('arsalesjrn.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS BillingCodeSummary AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Billing Code Summary]
   cOnClickCommand = [m.goStateManager.openformmulti('arbillcode.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS CustomerStatements AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [C\<ustomer Statements]
   cOnClickCommand = [m.goStateManager.openformmulti('arcuststm.scx')]
ENDDEFINE

*AM
*===============================================================================
*===============================================================================
DEFINE CLASS AP_Reports AS SFBar OF SFMenu.vcx
*===============================================================================
*===============================================================================
   cCaption   = [A/\<P Reports]
   cPopupName = [APReports]
   cSkipFor   = [NOT m.goApp.lAPreports]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('VendorListing', '', 'VendorListing')
         .AddBar('VendorLabels', '', 'VendorLabels')
         .AddSeparatorBar()
         .AddBar('VendorActRpt', '', 'VendorActRpt')
         .AddBar('VendorCheckStmts', '', 'VendorCheckStmts')
         .AddSeparatorBar()
         .AddBar('AgedPayableRpt', '', 'AgedPayableRpt')
         .AddBar('CashRequirements', '', 'CashRequirements')
         .AddBar('OutstandingBills', '', 'OutstandingBills')
         .AddBar('BillPaymentRpt', '', 'BillPaymentRpt')
         .AddBar('PurchaseJournRpt', '', 'PurchaseJournRpt')
         .AddBar('SalesTaxPayable', '', 'SalesTaxPayable')
         .AddSeparatorBar()
         .AddBar('ConsolidatedPayables', '', 'ConsolidatedPayables')
         .AddSeparatorBar()
         .AddBar('EmailVendors', '', 'EmailVendors')
      ENDWITH
   ENDPROC
ENDDEFINE

*DM
*===============================================================================
*===============================================================================
DEFINE CLASS Vendor_Reports AS SFBar OF SFMenu.vcx
*===============================================================================
*===============================================================================
   cCaption   = [\<Vendor Reports]
   cPopupName = [VendorReports]
   cSkipFor   = [NOT m.goApp.lJIBReports and not m.goapp.lRevDistReports]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('VendorListing', '', 'VendorListing')
         .AddBar('VendorLabels', '', 'VendorLabels')
         .AddSeparatorBar()
         .AddBar('VendorExpenses', '', 'VendorExpenses')
         .AddBar('VendorStatement', '', 'VendorStatement')
         .AddBar('VendorActRpt', '', 'VendorActRpt')
         .AddBar('VendorCheckStmts', '', 'VendorCheckStmts')
         .AddSeparatorBar()
         .AddBar('AgedPayableRpt', '', 'AgedPayableRpt')
         .AddBar('CashRequirements', '', 'CashRequirements')
         .AddBar('OutstandingBills', '', 'OutstandingBills')
         .AddSeparatorBar()
         .AddBar('EmailVendors', '', 'EmailVendors')
      ENDWITH
   ENDPROC
ENDDEFINE
*AM
*===============================================================================
DEFINE CLASS VendorListing AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Vendor Listing]
   cOnClickCommand = [m.goStateManager.openformmulti('apvendrpt.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS VendorLabels AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Vendor \<Labels/Envelopes]
   cOnClickCommand = [m.goStateManager.openformmulti('apvendlab.scx')]
ENDDEFINE

*DM
*===============================================================================
DEFINE CLASS VendorExpenses AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Vendor E\<xpenses by Vendor]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrvexp.scx')]
ENDDEFINE
*DM
*===============================================================================
DEFINE CLASS VendorStatement AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Vendor \<Statements]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrvstmt.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS VendorActRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Vendor \<Activity Report]
   cOnClickCommand = [m.goStateManager.openformmulti('apvendact.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS VendorCheckStmts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Vendor Check \<Statements]
   cOnClickCommand = [m.goStateManager.openformmulti('apvendstm.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS AgedPayableRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Aged \<Payables Reports]
   cOnClickCommand = [m.goStateManager.openformmulti('apaged.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS CashRequirements AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Cash Requirements]
   cOnClickCommand = [m.goStateManager.openformmulti('apcashreq.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS OutstandingBills AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Outstanding \<Bills]
   cOnClickCommand = [m.goStateManager.openformmulti('apbillout.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS BillPaymentRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Bill Payment Report]
   cOnClickCommand = [m.goStateManager.openformmulti('apbillpayrpt.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS PurchaseJournRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Purchase \<Journal Reports]
   cOnClickCommand = [m.goStateManager.openformmulti('apbilljrn.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS SalesTaxPayable AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Sales Ta\<x Reports]
   cOnClickCommand = [m.goStateManager.openformmulti('apsalestx.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS ConsolidatedPayables AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Consolidated Payables]
   cOnClickCommand = [m.goStateManager.openformmulti('apagedcon.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS EmailVendors AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Send \<Email to Vendors]
   cOnClickCommand = [m.goStateManager.openformmulti('utEmailVendors.scx')]
ENDDEFINE

*AM
*===============================================================================
*===============================================================================
DEFINE CLASS GL_Reports AS SFBar OF SFMenu.vcx
*===============================================================================
*===============================================================================
   cCaption   = [\<G/L Reports]
   cPopupName = [GLReports]
   cSkipFor   = [NOT m.goApp.lGLreports]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('COAListing', '', 'COAListing')
         .AddSeparatorBar()
         .AddBar('JournalRpts', '', 'JournalRpts')
         .AddBar('TransGroupJournal', '', 'TransGroupJournal')
         .AddSeparatorBar()
         .AddBar('GLActWell', '', 'GLActWell')
         .AddBar('GLActID', '', 'GLActID')
         .AddBar('GLActDept', '', 'GLActDept')
         .AddBar('GLAct', '', 'GLAct')
         .AddSeparatorBar()
         .AddBar('TrialBalance', '', 'TrialBalance')
         .AddBar('BalanceSheet', '', 'BalanceSheet')
         .AddBar('IncomeStatement', '', 'IncomeStatement')
         .AddSeparatorBar()
         .AddBar('ConsolidatedGLRpts', '', 'ConsolidatedGLRpt')
      ENDWITH
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS COAListing AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Chart of Accounts Listing]
   cOnClickCommand = [m.goStateManager.openformmulti('glcoalist.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS JournalRpts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Journal Reports]
   cOnClickCommand = [m.goStateManager.openformmulti('gljournrpt.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS TransGroupJournal AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Tra\<nsaction Group Journal]
   cOnClickCommand = [m.goStateManager.openformmulti('gltrangroup.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS GLActWell AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [G/L Activity by \<Well]
   cOnClickCommand = [m.goStateManager.openformmulti('glacctactw.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS GLActID AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [G/L \<Activity by ID]
   cOnClickCommand = [m.goStateManager.openformmulti('glactid.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS GLActDept AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [G/L Activity by \<Department]
   cOnClickCommand = [m.goStateManager.openformmulti('glacctactd.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS GLAct AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<G/L Account Activity]
   cOnClickCommand = [m.goStateManager.openformmulti('glactlist.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS TrialBalance AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Trial Balance]
   cOnClickCommand = [m.goStateManager.openformmulti('gltrialbrpt.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS BalanceSheet AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Balance Sheet]
   cOnClickCommand = [m.goStateManager.openformmulti('glbalrpt.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS IncomeStatement AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Income Statement]
   cOnClickCommand = [m.goStateManager.openformmulti('glincrpt.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS ConsolidatedGLRpts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [Consolidated \<Reports]
   cPopupName = [GLConReports]
   cSkipFor   = [NOT m.goApp.lGLreports]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('GLConTrial', '', 'GLConTrial')
         .AddBar('GLConBal', '', 'GLConBal')
         .AddBar('GLConInc', '', 'GLConInc')
      ENDWITH
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS GLConTrial AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Trial Balance]
   cOnClickCommand = [m.goStateManager.openformmulti('gltrialcon.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS GLConBal AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Balance Sheet]
   cOnClickCommand = [m.goStateManager.openformmulti('glbalcon.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS GLConInc AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Income Statement]
   cOnClickCommand = [m.goStateManager.openformmulti('glinccon.scx')]
ENDDEFINE

*AM
*===============================================================================
*===============================================================================
DEFINE CLASS PR_Reports AS SFBar OF SFMenu.vcx
*===============================================================================
*===============================================================================
   cCaption   = [Pa\<yroll Reports]
   cPopupName = [PRReports]
   cSkipFor   = [NOT m.goApp.lPayrollopt or not m.goapp.lpayrollreports]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('EmployeeRpts', '', 'EmployeeRpts')
         .AddSeparatorBar()
         .AddBar('PayrollRegister', '', 'PayrollRegister')
         .AddBar('PayrollDetailRpt', '', 'PayrollDetailRpt')
         .AddBar('PayrollStubRpt', '', 'PayrollStubRpt')
         .AddBar('PR941Worksheet', '', 'PR941Worksheet')
         .AddBar('FUTASUTARpts', '', 'FUTASUTARpts')
         .AddBar('IncomeTotals', '', 'IncomeTotals')
         .AddBar('DeductionTotals', '', 'DeductionTotals')
         .AddBar('PayrollDepositRpt', '', 'PayrollDepositRpt')
         .AddBar('PayrollDetailRpt', '', 'PayrollDetailRpt')
         .AddSeparatorBar()
         .AddBar('CreateW2File', '', 'CreateW2File')
         .AddBar('ModifyW2File', '', 'ModifyW2File')
         .AddBar('PrintW2Summary', '', 'PrintW2Summary')
         .AddBar('PrintW2Forms', '', 'PrintW2Forms')
         IF FILE(m.goapp.cCommonFolder + 'ohw2file.txt')
            .AddSeparatorBar()
            .AddBar('OHW2File', '', 'OHW2File')
         ENDIF
         .AddSeparatorBar()
         .AddBar('W2Portal', '', 'W2Portal')
         .AddBar('CheckW2Status', '', 'CheckW2Status')
      ENDWITH
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS EmployeeRpts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<Employee Reports]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('premplist.scx')
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS PayrollRegister AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Payroll \<Register]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('prreg.scx')
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS PayrollDetailRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Payroll Detai\<l Report]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('prlabor.scx')
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS PayrollStubRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Payroll Stu\<b Report]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('prstubrpt.scx')
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS PR941Worksheet AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<941 Worksheet]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('pr941.scx')
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS FUTASUTARpts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<FUTA/SUTA Reports]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('prunemprpt.scx')
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS IncomeTotals AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<Income Totals]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('prtotrpt.scx', 'I')
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS DeductionTotals AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Deduction \<Totals]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('prtotrpt.scx', 'D')
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS PayrollDepositRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Payroll \<Deposit Liabilities]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('prliabrpt.scx')
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS CreateW2File AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<Create W2 File]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('prw2make.scx')
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS ModifyW2File AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<Modify W2 File]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('prw2upd.scx')
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS PrintW2Summary AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Print \<W2 Summary]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('prw2list.scx')
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS PrintW2Forms AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<Print W2 Forms]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('prw2print.scx')
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS OHW2File AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Create \<OH W2 File]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('prw2ohfile.scx')
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS W2Portal AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Pivoten W2 Reporting/Submission]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('prw2submission.scx')
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS CheckW2Status AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Check W2 Filing Status]

   PROCEDURE CLICK
      oLink = CREATEOBJECT('hyperlink')
      oLink.NAVIGATETO('https://sherware.nelcoportal.com/Account/Logon')
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
*===============================================================================
DEFINE CLASS CS_Reports AS SFBar OF SFMenu.vcx
*===============================================================================
*===============================================================================
   cCaption   = [\<Cash Reports]
   cPopupName = [CSReports]
   cSkipFor   = [NOT  m.goapp.lcashreports]

   PROCEDURE AddBars
      WITH THIS
         IF m.goapp.lAMVersion OR m.goapp.lQBVersion
            .AddBar('CheckRegisterRpt', '', 'CheckRegisterRpt')
         ENDIF
         IF m.goapp.lAMVersion OR m.goapp.lDMVersion
            .AddBar('CheckListingRpt', '', 'CheckListingRpt')
         ENDIF
         .AddSeparatorBar()
         IF m.goapp.lAMVersion
            .AddBar('ReceiptDisbRpt', '', 'ReceiptDisbRpt')
            .AddBar('OwnerCheckRpt', '', 'OwnerCheckRpt')
            .AddSeparatorBar()
         ENDIF
         .AddBar('ReconRpts', '', 'ReconRpts')
         IF m.goapp.lDMVersion
            .AddBar('OwnerCheckRpt', '', 'OwnerCheckRpt')
         ENDIF
      ENDWITH
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS CheckRegisterRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Print Check Register]
   cOnClickCommand = [m.goStateManager.openformmulti('cschkreg.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS CheckListingRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Print Check Listing]
   cOnClickCommand = [m.goStateManager.openformmulti('cschkreg.scx',.t.)]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS ReceiptDisbRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Cash Receipts/\<Disbursements  Report]
   cOnClickCommand = [m.goStateManager.openformmulti('csrctdisb.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS OwnerCheckRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Owner Check Breakdown]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrocheck.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS ReconRpts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Past \<Reconciliation Reports]

   PROCEDURE CLICK
      LOCAL lcList, oglmaint
      PRIV llOK

      lcPath = m.goapp.cdatafilepath


      IF NOT USED('checkrec')
         USE checkrec IN 0
      ENDIF
      IF NOT USED('coa')
         USE coa IN 0
      ENDIF
      IF NOT USED('checks')
         USE checks IN 0
      ENDIF

      llOK   = .T.
      lcList = 'cacctno,drecdate,nopenbal,nendbal'

      oglmaint = CREATEOBJECT('glmaint')

      DO FORM picklist WITH 'Checkrec', lcList, 'cidchkrec', 4, , , , 188

      IF llOK
         oglmaint.rptrecon(checkrec.drecdate, .T., checkrec.cacctno)
      ENDIF

      IF USED('checkrec')
         USE IN checkrec
      ENDIF
   ENDPROC
ENDDEFINE

*===============================================================================
*===============================================================================
DEFINE CLASS WellReports AS SFBar OF SFMenu.vcx
*===============================================================================
*===============================================================================
   cCaption   = [\<Well Reports]
   cPopupName = [WellReports]
   cSkipFor   = [not m.goapp.lrevdistreports and not m.goapp.lpartnerreports and not m.goapp.lafereports and not m.goapp.ljibreports and not m.goapp.lInvestReports and not m.goapp.lAdmin]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('WellListingRpt', '', 'WellListingRpt')
         .AddBar('WellDivOrd', '', 'WellDivOrd')
         .AddSeparatorBar()
         .AddBar('RevenueByPurchaserRpt', '', 'RevenueByPurchaserRpt')
         .AddBar('RevenueByWellRpt', '', 'RevenueByWellRpt')
         .AddBar('FixedWellExpensesRpt', '', 'FixedWellExpensesRpt')
         .AddBar('UnallRevExpRpt', '', 'UnallRevExpRpt')
         .AddSeparatorBar()
         .AddBar('RevenueExpenseDetailRpt', '', 'RevenueExpenseDetailRpt')
         .AddBar('RevenueExpenseSummaryRpt', '', 'RevenueExpenseSummaryRpt')
         .AddBar('RevenueOpSummaryRpt', '', 'RevenueOpSummaryRpt')
         .AddSeparatorBar()
         .AddBar('JIBExpDetailRpt', '', 'JIBExpDetailRpt')
         .AddBar('JIBExpSummaryRpt', '', 'JIBExpSummaryRpt')
         .AddBar('JIBOpSummaryRpt', '', 'JIBOpSummaryRpt')
         .AddSeparatorBar()
         .AddBar('WellProd', '', 'WellProd')
         .AddBar('WellProdAct', '', 'WellProdAct')
         .AddBar('WellTots', '', 'WellTots')
         .AddBar('WellProfitLossRpt', '', 'WellProfitLossRpt')
         .AddBar('DisbByWellRpt', '', 'DisbByWellRpt')
         .AddBar('MCFBBLRpt', '', 'MCFBBLRpt')
         .AddBar('ProductionDeclineRpt', '', 'ProductionDeclineRpt')
         .AddSeparatorBar()
         .AddBar('SaltWaterRpt', '', 'SaltWaterRpt')
         .AddBar('ExpensesByCodeRpt', '', 'ExpensesByCodeRpt')
         .AddBar('ExpensesByVendorRpt', '', 'ExpensesByVendorRpt')
         .AddBar('ExpensesBySectionRpt', '', 'ExpensesBySectionRpt')
         .AddSeparatorBar()
         .AddBar('FlatRateRpt', '', 'FlatRateRpt')
         .AddBar('CompGathRpt', '', 'CompGathRpt')
         .AddSeparatorBar()
         .AddBar('MeterCharts', '', 'MeterCharts')
         .AddBar('GasMeterRpt', '', 'GasMeterRpt')

      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS WellListingRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Well/Interest \<Listing]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrwlist.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports and not m.goapp.ljibreports and not m.goapp.lafereports]
ENDDEFINE

*===============================================================================
DEFINE CLASS WellDivOrd AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Well Division Orders]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrwdivord.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports and not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS RevenueByPurchaserRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Well Revenue by Purc\<haser]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrwrev.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS RevenueByWellRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Well Revenue by Well]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrwrevw.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS FixedWellExpensesRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Recurring Well Expenses]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrwfix.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS RevenueExpenseDetailRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Revenue/Expense \<Detail]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrwiedet.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS RevenueExpenseSummaryRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Revenue/Expense Su\<mmary]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrwiesum.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS RevenueOpSummaryRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Well Revenue \<Operating Summary]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrwopsum.scx','R')]
   cSkipFor        = [not m.goapp.lrevdistreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS JIBExpDetailRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Well JIB Expense De\<tail Report]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrwjibdet.scx')]
   cSkipFor        = [not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS JIBExpSummaryRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Well JIB Expense Summary Report]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrwiesumJ.scx','J')]
ENDDEFINE

*===============================================================================
DEFINE CLASS JIBOpSummaryRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Well \<JIB Operating Summary]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrwopsum.scx','J')]
   cSkipFor        = [not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS WellProd AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Production Reports]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrwprod.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports and not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS WellProdAct AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Lease Sales Activity Reports]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrwprodact.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports and not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS WellTots AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Well \<Totals Report]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrwytd.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports and not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS WellProfitLossRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Well Profit and Lo\<ss]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrwprofit.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports and not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS DisbByWellRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Disb\<ursements by Well]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrwdisb.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports and not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS MCFBBLRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [MCF and \<BBL Report]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrwmcf.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS ProductionDeclineRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Production Decline Report]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrwdecline.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS SaltWaterRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Salt Wat\<er Reports]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrwsalt.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports and not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS ExpensesByCodeRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Well Expenses by Code]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrwexp.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports and not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS ExpensesByVendorRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Well Expenses by \<Vendor]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrvexp.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports and not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS ExpensesBySectionRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Well Expenses by Tax \<Section]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrwclass.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports and not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS UnallRevExpRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Unallocated Revenue and Expenses]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrunall.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports and not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS FlatRateRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Flat-Rate Royalties Report]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrflatrate.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports and not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS CompGathRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Compression and Gat\<hering]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrwcomp.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports and not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS MeterCharts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Well Chart Readings]
   cOnClickCommand = [m.goStateManager.openformmulti('metercharts.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports and not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS GasMeterRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Gas Meter Reconciliations]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrmeterprint.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports and not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
*===============================================================================
DEFINE CLASS OwnerReports AS SFBar OF SFMenu.vcx
*===============================================================================
*===============================================================================
   cCaption   = [\<Owner Reports]
   cPopupName = [OwnerReports]
   cSkipFor   = [not m.goapp.lrevdistreports and not m.goapp.lpartnerreports and not m.goapp.lafereports and not m.goapp.ljibreports and not m.goapp.lInvestReports and not m.goapp.lAdmin]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('OwnerListingRpt', '', 'OwnerListingRpt')
         .AddBar('OwnerLabelsRpt', '', 'OwnerLabelsRpt')
         .AddSeparatorBar()
         .AddBar('OwnerDistStmtsRpt', '', 'OwnerDistStmtsRpt')
         .AddBar('OwnerStubRpt', '', 'OwnerStubRpt')

         IF m.goapp.lPartnershipMod
            .AddSeparatorBar()
            .AddBar('OwnerSettlementRpt', '', 'OwnerSettlementRpt')
         ENDIF


         .AddSeparatorBar()
         .AddBar('OwnerDisbSummaryRpt', '', 'OwnerDisbSummaryRpt')
         .AddBar('OwnerYearlyDisbSummaryRpt', '', 'OwnerYearlyDisbSummaryRpt')
         .AddBar('OwnerOneManRpt', '', 'OwnerOneManRpt')
         .AddSeparatorBar()
         .AddBar('OwnerJIBStmtRpt', '', 'OwnerJIBStmtRpt')

         IF NOT m.goapp.lQBVersion
            .AddBar('JIBReceivables', '', 'JIBReceivables')
            .AddBar('JIBInvPmts', '', 'JIBInvPmts')
         ENDIF

         .AddBar('OwnerJIBExpRpt', '', 'OwnerJIBExpRpt')
         .AddSeparatorBar()
         .AddBar('OwnerYTDITDRpt', '', 'OwnerYTDITDRpt')
         .AddBar('Owner1099ReconRpt', '', 'Owner1099ReconRpt')
         .AddSeparatorBar()
         .AddBar('LeaseOper', '', 'LeaseOper')
         .AddBar('OwnerPrepay', '', 'OwnerPrepay')

         .AddSeparatorBar()
         .AddBar('EmailOwners', '', 'EmailOwners')
         
         IF FILE(m.goapp.cdatafilepath + [PivotenCheck.ini])
            .AddSeparatorBar()
            .AddBar('VirtualLetterPrinting', '', 'VirtualLetterPrinting')
         ENDIF
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS OwnerListingRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Owner/Interest \<Listing]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrolist.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports and not m.goapp.ljibreports and not m.goapp.lhousegasreports and m.goapp.lafereports]
ENDDEFINE

*===============================================================================
DEFINE CLASS OwnerLabelsRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Owner L\<abels\Envelopes]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrolab.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports and not m.goapp.ljibreports and not m.goapp.lhousegasreports and m.goapp.lafereports]
ENDDEFINE


*===============================================================================
DEFINE CLASS OwnerDistStmtsRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Owner Distribution \<Statements]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrownstmt.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS OwnerSettlementRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Owner Settlemen\<t Statements]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrosettlement.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports]
ENDDEFINE
*===============================================================================
DEFINE CLASS OwnerStubRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Owner Stu\<b Statements]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrostub.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS OwnerDisbSummaryRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Disbursement Summary]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrodisb.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS OwnerYearlyDisbSummaryRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Yearly Disbursement Summary]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrodisbyr.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS OwnerOneManRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [One-\<Man Items Report]
   cOnClickCommand = [m.goStateManager.openformmulti('dmroneman.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS OwnerJIBStmtRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Joint Interest Billing Statements]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrojib.scx')]
   cSkipFor        = [not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS JIBReceivables AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Joint Interest Billing Receivables]
   cOnClickCommand = [m.goStateManager.openformmulti('araged.scx','J')]
   cSkipFor        = [not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS JIBinvPmts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Joint Interest \<Invoices and Payments Report]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrojibrpt.scx','JP')]
   cSkipFor        = [not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS OwnerJIBExpRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Joint Interest Expenses by Ca\<tegory]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrojibrpt.scx','JE')]
   cSkipFor        = [not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS OwnerYTDITDRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Owner YTD and ITD Statements]
   cOnClickCommand = [m.goStateManager.openformmulti('dmroytd.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports and not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS Owner1099ReconRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Report - Owner \<1099 Reconciliation]
   PROCEDURE CLICK
      DO Get1099Formats
      m.goStateManager.OpenFormMulti('ten99recon.scx')
   ENDPROC
   cSkipFor      = [not m.goapp.lrevdistreports and not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS LeaseOper AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Lease Operatin\<g Statements]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrownpl.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports and not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS OwnerPrepay AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [O\<wner Prepayment Report]
   cOnClickCommand = [m.goStateManager.openformmulti('dmroprepay.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports and not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS EmailOwners AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Send \<Email to Owners]
   cOnClickCommand = [m.goStateManager.openformmulti('utEmailOwners.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports and not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS VirtualLetterPrinting AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Owner Letter Processing Services]
   cOnClickCommand = [m.goStateManager.openformmulti('dmroeletters.scx')]
   cSkipFor        = [not m.goapp.lrevdistreports and not m.goapp.ljibreports]
ENDDEFINE

*===============================================================================
DEFINE CLASS ProgramReports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [\<Program Reports]
   cPopupName = [ProgramReports]
   cSkipFor   = [not m.goapp.lrevdistreports and not m.goapp.lpartnerreports and not m.goapp.lafereports and not m.goapp.ljibreports and not m.goapp.lInvestReports and not m.goapp.lAdmin]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('ProgListingRpt', '', 'ProgListingRpt')
         .AddBar('ProgHistoryRpt', '', 'ProgHistoryRpt')
         .AddBar('ProgTotalsRpt', '', 'ProgTotalsRpt')
         .AddBar('ProgDistRpt', '', 'ProgDistRpt')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS ProgListingRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Program/Partnership \<Listing]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrplist.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ProgHistoryRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Program/Partnership \<History]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrphist.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ProgTotalsRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Partnership/Joint Venture \<Totals]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrprogtot.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ProgDistRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Partnership/Joint Venture \<Distributions]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrprogrpt.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS SuspenseReports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Suspense Reports]
   cSkipFor        = [not m.goapp.lrevdistreports]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrsuspense.scx')]

ENDDEFINE

*===============================================================================
DEFINE CLASS LandReports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [\<Land Reports]
   cPopupName = [LandReports]
   cSkipFor   = [not m.goapp.lLandReports and not m.goapp.lAdmin]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('LandRecords', '', 'LandRecords')
         .AddBar('DelayRentalRpt', '', 'DelayRentalRpt')
         .AddBar('DelayRentalDet', '', 'DelayRentalDet')
         .AddBar('LeasePermitting', '', 'LeasePermitting')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS LandRecords AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Land Records]
   cOnClickCommand = [m.gostatemanager.openformmulti('lmrland.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS DelayRentalRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Delay Rental Pmts]
   cOnClickCommand = [m.gostatemanager.openformmulti('lmrdelay.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS DelayRentalDet AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Delay \<Rental Check Detail]
   cOnClickCommand = [m.gostatemanager.openformmulti('lmrlandchk.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS LeasePermitting AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Lease \<Permitting Report]
   cOnClickCommand = [m.gostatemanager.openformmulti('lmrlease1.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS AFEReports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [\<AFE Reports]
   cPopupName = [AFEReports]
   cSkipFor   = [not m.goapp.lAFEReports and not m.goapp.lAdmin]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('AFERpt', '', 'AFERpt')
         .AddBar('AFEOwnPresRpt', '', 'AFEOwnPresRpt')
         .AddBar('AFEDetailRpt', '', 'AFEDetailRpt')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS AFERpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<AFE Reports]
   cOnClickCommand = [m.gostatemanager.openformmulti('aferpt.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS AFEOwnPresRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [AFE \<Owner Presentation/Cash Call]
   cOnClickCommand = [m.goStateManager.openformmulti('afeownrpt.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS AFEDetailRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [AFE \<Detail Report]
   cOnClickCommand = [m.goStateManager.openformmulti('afedetrpt.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS InvestmentReports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [\<Investment Reports]
   cPopupName = [InvestmentReports]
   cSkipFor   = [not m.goapp.lInvestReports and not m.goapp.lAdmin]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('InvWellPayoutRpt', '', 'InvWellPayoutRpt')
         .AddBar('InvWellPayoutWellRpt', '', 'InvWellPayoutWellRpt')
         .AddBar('InvDepletionRpt', '', 'InvDepletionRpt')
         .AddBar('InvDiscRateReturnRpt', '', 'InvDiscRateReturnRpt')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS InvWellPayoutRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Well \<Payout by Owner Reports]
   cOnClickCommand = [m.gostatemanager.openformmulti('imrpayout.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS InvWellPayoutWellRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Well \<Payout by Well]
   cOnClickCommand = [m.gostatemanager.openformmulti('dmrpayout.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS InvDepletionRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Depletion Reports]
   cOnClickCommand = [m.gostatemanager.openformmulti('imrdepl.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS InvDiscRateReturnRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Discounted \<Rate of Return Report]
   cOnClickCommand = [m.gostatemanager.openformmulti('imrdiscrate.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS HouseGasReports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [\<House Gas Reports]
   cPopupName = [HouseGasReports]
   cSkipFor   = [NOT m.goapp.lhousegasopt or not m.goapp.lhousegasReports and not m.goapp.lAdmin]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('HGOwnerUsageRpt', '', 'HGOwnerUsageRpt')
         .AddBar('HGUsageStmtRpt', '', 'HGUsageStmtRpt')
         .AddBar('HGReceivablesRpt', '', 'HGReceivablesRpt')
         .AddSeparatorBar()
         .AddBar('HGUsageRpt', '', 'HGUsageRpt')
         .AddBar('HGRouteRpt', '', 'HGRouteRpt')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS HGOwnerUsageRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Owner \<Listing]
   cOnClickCommand = [m.gostatemanager.openformmulti('gasownlist.scx','OL')]
ENDDEFINE

*===============================================================================
DEFINE CLASS HGUsageStmtRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Owner \<Usage Statement]
   cOnClickCommand = [m.gostatemanager.openformmulti('gasusestmt.scx','OS')]
ENDDEFINE

*===============================================================================
DEFINE CLASS HGReceivablesRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [House \<Gas Receivables]
   cOnClickCommand = [m.gostatemanager.openformmulti('araged.scx',"H")]
ENDDEFINE

*===============================================================================
DEFINE CLASS HGUsageRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Usage \<Report]
   cOnClickCommand = [m.gostatemanager.openformmulti('gasuserpt.scx','OP')]
ENDDEFINE

*===============================================================================
DEFINE CLASS HGRouteRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Route Report]
   cOnClickCommand = [m.gostatemanager.openformmulti('gasrouterpt.scx','OR')]
ENDDEFINE

*===============================================================================
DEFINE CLASS PluggingReports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [Plu\<gging Reports]
   cPopupName = [PluggingReports]
   cSkipFor   = [not m.goapp.lPluggingModule]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('PlugTargetsRpt', '', 'PlugTargetsRpt')
         .AddBar('PlugFundsRpt', '', 'PlugFundsRpt')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS PlugTargetsRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Plugging Targets]
   cOnClickCommand = [m.goStateManager.openformmulti('plugreports.scx','TARGET')]
ENDDEFINE

*===============================================================================
DEFINE CLASS PlugFundsRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Plugging Funds]
   cOnClickCommand = [m.goStateManager.openformmulti('plugreports.scx','FUND')]
ENDDEFINE

*===============================================================================
DEFINE CLASS BrineReports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [\<Brine Reports]
   cPopupName = [BrineReports]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('BrineLeaseRpt', '', 'BrineLeaseRpt')
         .AddBar('DisposalSiteRpt', '', 'DisposalSiteRpt')
         .AddSeparatorBar()
         .AddBar('BrineInvoices', '', 'BrineInvoices')
         .AddBar('WorkOrderRpts', '', 'WorkOrderRpts')
         .AddBar('BrineLogRpts', '', 'BrineLogRpts')
         .AddBar('DisposalWellReports', '', 'DisposalWellReports')
         .AddBar('ProductMovementRpts', '', 'ProductMovementRpts')
         .AddSeparatorBar()
         .AddBar('OhioForm13', '', 'OhioForm13')
         .AddBar('OhioInjFeeRpt', '', 'OhioInjFeeRpt')
         .AddSeparatorBar()
         .AddBar('OhioInjFile', '', 'OhioInjFile')
         .AddBar('OhioInjFileUpd', '', 'OhioInjFileUpd')
         .AddBar('OhioInjQtrRpt', '', 'OhioInjQtrRpt')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS BrineLeaseRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<Lease Listing]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('bmrleases.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS DisposalSiteRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<Disposal Site Listing]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('bmrdisposal.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS BrineInvoices AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<Brine Invoices]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('bminvprint.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS WorkOrderRpts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<Work Order Reports]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('bmrworkord.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS BrineLogRpts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Lo\<g Reports]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('bmrbrinelogs.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS DisposalWellReports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Disposal Well \<Reports]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('bmrdisprpt.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS ProductMovementRpts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<Product Movement Reports]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('bmrprodmove.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS OhioForm13 AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<Ohio Form 13 Brine Reports]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('bmrbrinerpt.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS OhioInjFile AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Create Quarterly Ohio Injection File]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('bminjfile.scx')
ENDDEFINE

*===============================================================================
DEFINE CLASS OhioInjFileUpd AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [OH Brine Injection File Update]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('bmohfileupd.scx')
ENDDEFINE


*===============================================================================
DEFINE CLASS OhioInjFeeRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Ohio Injection Report]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('bmrinjfee.scx')
ENDDEFINE

*===============================================================================
DEFINE CLASS OhioInjQtrRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Ohio Quarterly Injection Report]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('bmohinjqtr.scx')
ENDDEFINE

*===============================================================================
DEFINE CLASS Process1099s AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [\<1099 Processing and Printing]
   cPopupName = [Processing1099s]
   cSkipFor   = [(NOT m.goApp.lTaxIds or not m.goapp.lRevDistReports) and not m.goapp.lAdmin]

   PROCEDURE AddBars
      WITH THIS

         .AddBar('View1099Tutorial', '', 'View1099Tutorial')
         .AddSeparatorBar()
         .AddBar('StatePayerSetup', '', 'StatePayerSetup')
         .AddSeparatorBar()
         .AddBar('TaxIDList', '', 'TaxIDList')
         .AddBar('TINMatching', '', 'TINMatching')
         .AddSeparatorBar()
         .AddBar('Create1099s', '', 'Create1099s')
         .AddSeparatorBar()
         .AddBar('Update1099s', '', 'Update1099s')
         .AddBar('Update1099State', '', 'Update1099State')
         .AddBar('Update1099c', '', 'Update1099c')
         .AddBar('Update1099Det', '', 'Update1099Det')
         .AddSeparatorBar()
         .AddBar('Ten99Summary', '', 'Ten99Summary')
         .AddBar('State1099Summary', '', 'State1099Summary')
         .AddSeparatorBar()
         .AddBar('Print1099s', '', 'Print1099s')
         .AddBar('PrintState1099s', '', 'PrintState1099s')
         .AddSeparatorBar()
         .AddBar('MagMedia1099s', '', 'MagMedia1099s')
         .AddBar('StateMagMedia1099s', '', 'StateMagMedia1099s')
         .AddSeparatorBar()
         .AddBar('Owner1099Rec', '', 'Owner1099Rec')
         .AddSeparatorBar()
         .AddBar('CheckForErrors', '', 'CheckForErrors')
         .AddBar('BuildRecon', '', 'BuildRecon')
         .AddSeparatorBar()
         .AddBar('Transmit1099s', '', 'Transmit1099s')
         .AddBar('Status1099s', '', 'Status1099s')
         .AddBar('Status1099Rpt', '', 'Status1099Rpt')

      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Ten99Menu AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<1099 Processing and Printing]

   PROCEDURE CLICK
      Get1099Formats()
      m.goStateManager.OpenForm('rpts1099s.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS View1099Tutorial AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Step 1 - View 1099 Tutorials - Recommended]

   PROCEDURE CLICK
      oLink = CREATEOBJECT('hyperlink')
      oLink.NAVIGATETO('https://share.synthesia.io/1201327e-adbb-4e7c-9d3e-409d5de6a7bd')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS StatePayerSetup AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Step 2 - Setup States Payer EIN Numbers - State Payers Only]
   PROCEDURE CLICK
      DO Get1099Formats
      m.goStateManager.OpenFormMulti('ten99states.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS TaxIDList AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Step 3 - View Report of Tax ID's - Recommended]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrtaxidlist.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS TINMatching AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Step 4 - Perform TIN Matching]
   PROCEDURE CLICK
      Get1099Formats()
      m.goStateManager.OpenFormMulti('tinmatching.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Create1099s AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Step 5 - Create 1099s - Required]
   PROCEDURE CLICK
      DO Get1099Formats
      m.goStateManager.OpenFormMulti('ten99create.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Update1099s AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Step 6 - Update and Review 1099 Records - Recommended]
   PROCEDURE CLICK
      DO Get1099Formats
      m.goStateManager.OpenFormMulti('ten99upd.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Update1099State AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Step 7 - Up\<date the State 1099 File]
   PROCEDURE CLICK
      DO Get1099Formats
      m.goStateManager.OpenFormMulti('ten99updst.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Update1099c AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Step 8 - Update and Review Corrected 1099 Returns - If Needed]
   PROCEDURE CLICK
      DO Get1099Formats
      m.goStateManager.OpenFormMulti('ten99cupd.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Update1099Det AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Step 10 - Review Owner 1099 Reconcilation Rpt Records - If Needed]
   PROCEDURE CLICK
      DO Get1099Formats
      m.goStateManager.OpenFormMulti('ten99detupd.scx')
   ENDPROC
ENDDEFINE

*=============================================================================
DEFINE CLASS Ten99Summary AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Step 11 - Create Report Federal 1099 Summary - Recommended]
   PROCEDURE CLICK
      Get1099Formats()
      m.goStateManager.OpenFormMulti('ten99summ.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS State1099Summary AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Step 12 - Create Report State 1099 Summary]
   PROCEDURE CLICK
      DO Get1099Formats
      m.goStateManager.OpenFormMulti('ten99summst.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Print1099s AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Step 13 - Print and Distribute 1099 Forms - Required]
   PROCEDURE CLICK
      DO Get1099Formats
      m.goStateManager.OpenFormMulti('ten99print.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS PrintState1099s AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Step 14 - Print and Distribute State 1099s - State Payers Only]
   PROCEDURE CLICK
      DO Get1099Formats
      m.goStateManager.OpenFormMulti('ten99printst.scx')
   ENDPROC
ENDDEFINE


*===============================================================================
DEFINE CLASS MagMedia1099s AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Step 15 - Create Federal 1099 FIRE File - Optional]
   PROCEDURE CLICK
      DO Get1099Formats
      m.goStateManager.OpenFormMulti('ten99mag.scx')
   ENDPROC
ENDDEFINE



*===============================================================================
DEFINE CLASS StateMagMedia1099s AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Step 16 - Create State 1099 Electronic File - State Payes Only]
   PROCEDURE CLICK
      DO Get1099Formats
      m.goStateManager.OpenFormMulti('ten99magst.scx')
   ENDPROC
ENDDEFINE


*===============================================================================
DEFINE CLASS Owner1099Rec AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Step 17 - Print Owner 1099 Reconciliation Statements - Optional]
   PROCEDURE CLICK
      DO Get1099Formats
      m.goStateManager.OpenFormMulti('ten99recon.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Transmit1099s AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Step 19 - Pivoten 1099 Web Reporting/Submission]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('ten99taxbandits.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Status1099s AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Step 20 - Pivoten 1099 Web Reporting Status]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('ten99taxbanditstatus.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Ten99Misc AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Step 99 - 1099-Misc \<Replacement]
   PROCEDURE CLICK
      Get1099Formats()
      m.goStateManager.OpenFormMulti('ten99misc.scx', 'MISC')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Ten99NECR AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Step 99 - 1099-NEC \<Replacement]
   PROCEDURE CLICK
      DO Get1099Formats
      m.goStateManager.OpenFormMulti('ten99misc.scx', 'NEC')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS State1099Misc AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Step 99 - State \<1099-Misc Replacement]
   PROCEDURE CLICK
      DO Get1099Formats
      m.goStateManager.OpenFormMulti('ten99miscst.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS CheckForErrors AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Step 9 - Check 1099 File for Errors - Recommended]
   PROCEDURE CLICK
      swselect('tax1099')
      SET ORDER TO cyear
      GO BOTT
      lcYear = cyear
      check_1099_errors(lcYear)
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS BuildRecon AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Step 18 - Rebuild Owner 1099 Reconciliation File - Optional]
   PROCEDURE CLICK
      o1099Processing = CREATEOBJECT('ten99s')
      swselect('tax1099')
      SET ORDER TO cyear
      GO BOTT
      lcYear = cyear
      o1099Processing.BuildReconData(lcYear)
      o1099Processing = .NULL.
      MESSAGEBOX('Rebuild of owner 1099 reconciliation data is complete.', 64, 'Rebuild Owner 1099 Reconciliation Data')
   ENDPROC
ENDDEFINE

*=============================================================================
DEFINE CLASS Status1099Rpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Step 21 - 1099 Filing Status Report]
   PROCEDURE CLICK
      m.goStateManager.OpenFormMulti('ten99transmitted.scx')
   ENDPROC
ENDDEFINE


*===============================================================================
DEFINE CLASS Process1065s AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [1065 and \<K1 Processing]
   cPopupName = [Processing1065s]
   cSkipFor   = [NOT m.goApp.lK1Opt OR not m.goapp.lform1065reporting and not m.goapp.lAdmin]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('Form1065FormatDownload', '', 'Form1065FormatDownload')
         .AddSeparatorBar()
         .AddBar('Form1065Create', '', 'Form1065Create')
         .AddSeparatorBar()
         .AddBar('Form1065Modify', '', 'Form1065Modify')
         .AddBar('Form1065DedModify', '', 'Form1065DedModify')
         .AddBar('Form1065K1Modify', '', 'Form1065K1Modify')
         .AddBar('Form1065K1DedModify', '', 'Form1065K1DedModify')
         .AddSeparatorBar()
         .AddBar('Form1065K1Print1065', '', 'Form1065K1Print1065')
         .AddBar('Form1065K1PrintK1', '', 'Form1065K1PrintK1')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Form1065FormatDownload AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Download 1065/K1 Report Formats]

   PROCEDURE CLICK
      DO form1065_k1_upd
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Form1065Create AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<Create 1065 and K1 Files]
   PROCEDURE CLICK
      DO form1065_k1_upd
      m.goStateManager.OpenFormMulti('dm1065create.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Form1065Modify AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<Modify 1065 File]
   PROCEDURE CLICK
      DO form1065_k1_upd
      m.goStateManager.OpenFormMulti('dm1065upd.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Form1065DedModify AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Modify 1065 Deductions]
   PROCEDURE CLICK
      DO form1065_k1_upd
      m.goStateManager.OpenFormMulti('dm1065dedupd.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Form1065K1Modify AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Modify \<K1 File]
   PROCEDURE CLICK
      DO form1065_k1_upd
      m.goStateManager.OpenFormMulti('dmk1upd.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Form1065K1DedModify AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Modify K1 \<Deductions]
   PROCEDURE CLICK
      DO form1065_k1_upd
      m.goStateManager.OpenFormMulti('dmk1dedupd.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Form1065K1Print1065 AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<Print 1065 Forms]
   PROCEDURE CLICK
      DO form1065_k1_upd
      m.goStateManager.OpenFormMulti('dmr1065rpt.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Form1065K1Printk1 AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Print K1 \<Forms]
   PROCEDURE CLICK
      DO form1065_k1_upd
      m.goStateManager.OpenFormMulti('dmrk1rpt.scx')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS TaxReports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [Ta\<x Reports]
   cPopupName = [TaxReports]
   cSkipFor   = [not m.goapp.lRevDistReports and not m.goapp.lAdmin]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('SevTaxReports', '', 'SevTaxReports')
         .AddBar('BackupTaxReports', '', 'BackupTaxReports')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS SevTaxReports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Severance / Production Tax Reports]
   cOnClickCommand = [m.gostatemanager.openformmulti('dmrtaxes.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS BackupTaxReports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Backup/Tax \<Withholding]
   cOnClickCommand = [m.gostatemanager.openformmulti('dmrtaxes1.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS StateComplianceReports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [State Co\<mpliance Reports]
   cPopupName = [StateComplianceReports]
   cSkipFor   = [m.goapp.lDemo or not m.goapp.lRevDistReports and not m.goapp.lAdmin]

   PROCEDURE AddBars
      WITH THIS
         IF m.goapp.lCORpts
            .AddBar('CO_Reports', '', 'CO_Reports')
         ENDIF
         IF m.goapp.lNYRpts
            .AddBar('NY_Reports', '', 'NY_Reports')
         ENDIF
         IF m.goapp.lOHRpts
            .AddBar('OH_Reports', '', 'OH_Reports')
         ENDIF
         IF m.goapp.lPARpts
            .AddBar('PA_Reports', '', 'PA_Reports')
         ENDIF
         IF m.goapp.lTXRpts
            .AddBar('TX_Reports', '', 'TX_Reports')
         ENDIF
         IF m.goapp.lWVRpts
            .AddBar('WV_Reports', '', 'WV_Reports')
         ENDIF
         IF m.goapp.lWYRpts
            .AddBar('WY_Reports', '', 'WY_Reports')
         ENDIF
      ENDWITH
   ENDPROC
ENDDEFINE


*===============================================================================
DEFINE CLASS DownloadReports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [Download Report Formats]
   cPopupName = [DownloadReports]
   cSkipFor   = [m.goapp.lDemo or not m.goapp.lRevDistReports and not m.goapp.lAdmin]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('DownloadOwnStmts', '', 'DownloadOwnStmts')
         .AddBar('Download1099s', '', 'Download1099s')
         IF m.goapp.lK1Opt
            .AddBar('Download1065K1', '', 'Download1065K1')
         ENDIF
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS CO_Reports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Colorado Reports]
   cSkipFor = [NOT m.goApp.lCORpts]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('COStateAcctNumber', '', 'COStateAcctNumber')
         .AddSeparatorBar()
         .AddBar('CODR0461Create', '', 'CODR0461Create')
         .AddBar('CODR0461Modify', '', 'CODR0461Modify')
         .AddBar('CODR0461Print', '', 'CODR0461Print')
         .AddSeparatorBar()
         .AddBar('CODR0021WCreate', '', 'CODR0021WCreate')
         .AddBar('CODR0021WModify', '', 'CODR0021WModify')
         .AddBar('CODR0021WPrint', '', 'CODR0021WPrint')
         .AddSeparatorBar()
         .AddBar('CODR0456Modify', '', 'CODR0456Modify')
         .AddBar('CODR0456Print', '', 'CODR0456Print')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS COStateAcctNumber AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [State Account Number]
   cOnClickCommand = [m.gostatemanager.openformmulti('stateaccounts.scx','CO')]
ENDDEFINE

*===============================================================================
DEFINE CLASS CODR0461Create AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Create Monthly Severance Tax File (DR0461)]

   PROCEDURE CLICK
      getstateformats('CO', .T.)

      DO (m.goapp.cRptsFolder + 'StateReports\CO\costatereports') WITH m.goapp, 'codr0461.scx', 'CO'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS CODR0461Modify AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Modify Monthly Severance Tax File]

   PROCEDURE CLICK
      getstateformats('CO', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\CO\costatereports') WITH m.goapp, 'codr0461upd.scx', 'CO'

   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS CODR0461Print AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Print Monthly Severance Tax Rpt (DR0461)]

   PROCEDURE CLICK
      getstateformats('CO', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\CO\costatereports') WITH m.goapp, 'codr0461rpt.scx', 'CO'

   ENDPROC
ENDDEFINE


*===============================================================================
DEFINE CLASS CODR0021WCreate AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Create \<DR0021W & DR0456 Files]

   PROCEDURE CLICK
      getstateformats('CO', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\CO\costatereports') WITH m.goapp, 'codr0021w.scx', 'CO'

   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS CODR0021WModify AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Modify DR0021W Records]

   PROCEDURE CLICK
      getstateformats('CO', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\CO\costatereports') WITH m.goapp, 'codr0021wupd.scx', 'CO'

   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS CODR0021WPrint AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Print DR0021W Report]

   PROCEDURE CLICK
      getstateformats('CO', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\CO\costatereports') WITH m.goapp, 'codr0021wrpt.scx', 'CO'

   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS CODR0456Modify AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Modify DR0456 Records]

   PROCEDURE CLICK
      getstateformats('CO', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\CO\costatereports') WITH m.goapp, 'codr0456upd.scx', 'CO'

   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS CODR0456Print AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Print DR0456 Report]

   PROCEDURE CLICK
      getstateformats('CO', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\CO\costatereports') WITH m.goapp, 'codr0456rpt.scx', 'CO'

   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS NY_Reports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<New York Reports]
   cSkipFor = [NOT m.goApp.lNYRpts]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('NYStateAcctNumber', '', 'NYStateAcctNumber')
         .AddSeparatorBar()
         .AddBar('NYAnnualProdCreate', '', 'NYAnnualProdCreate')
         .AddBar('NYAnnualProdModify', '', 'NYAnnualProdModify')
         .AddBar('NYAnnualProdPrint', '', 'NYAnnualProdPrint')
         .AddBar('NYAnnualProdMag', '', 'NYAnnualProdMag')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS NYStateAcctNumber AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [State Account Number]
   cOnClickCommand = [m.gostatemanager.openformmulti('stateaccounts.scx','NY')]
ENDDEFINE

*===============================================================================
DEFINE CLASS NYAnnualProdCreate AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Create Annual File]

   PROCEDURE CLICK
      getstateformats('NY', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\NY\NYstatereports') WITH m.goapp, 'NYAnnualProdCreate.scx', 'NY'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS NYAnnualProdModify AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Modify Annual File]

   PROCEDURE CLICK
      getstateformats('NY', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\NY\NYstatereports') WITH m.goapp, 'NYAnnualProdUpd.scx', 'NY'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS NYAnnualProdPrint AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Print Annual Report]

   PROCEDURE CLICK
      getstateformats('NY', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\NY\NYstatereports') WITH m.goapp, 'NYAnnualProdPrint.scx', 'NY'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS NYAnnualProdMag AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Magnetic \<Annual Production File]

   PROCEDURE CLICK
      getstateformats('NY', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\NY\NYstatereports') WITH m.goapp, 'NYAnnualProdMag.scx', 'NY'

   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS OH_Reports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Ohio Reports]
   cSkipFor = [NOT m.goApp.lOHRpts]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('OHStateAcctNumber', '', 'OHStateAcctNumber')
         .AddSeparatorBar()
         .AddBar('OHForm10Create', '', 'OHForm10Create')
         .AddBar('OHForm10Modify', '', 'OHForm10Modify')
         .AddBar('OHForm10Summary', '', 'OHForm10Summary')
         .AddBar('OHForm10Print', '', 'OHForm10Print')
         .AddBar('OHForm10Mag', '', 'OHForm10Mag')
         .AddSeparatorBar()
         .AddBar('OHForm6Create', '', 'OHForm6Create')
         .AddBar('OHForm6Modify', '', 'OHForm6Modify')
         .AddBar('OHForm6Owners', '', 'OHForm6Owners')
         .AddBar('OHForm6Summary', '', 'OHForm6Summary')
         .AddBar('OHForm6Print', '', 'OHForm6Print')
         .AddSeparatorBar()
         .AddBar('OHFormSV3', '', 'OHFormSV3')
         .AddBar('OHFormSV3Remove', '', 'OHFormSV3Remove')
         .AddBar('OHFormSV6', '', 'OHFormSV6')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS OHStateAcctNumber AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [State Account]
   cOnClickCommand = [m.gostatemanager.openformmulti('stateaccounts.scx','OH')]

ENDDEFINE


*===============================================================================
DEFINE CLASS OHForm10Create AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Create Form 10 File]

   PROCEDURE CLICK
      getstateformats('OH', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\OH\OHStateReports') WITH m.goapp, 'OHForm10Create.scx', 'OH'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS OHForm10Modify AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Modify Form 10 File]

   PROCEDURE CLICK
      getstateformats('OH', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\OH\OHStateReports') WITH m.goapp, 'OHForm10Upd.scx', 'OH'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS OHForm10Summary AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Form 10 \<Summary]

   PROCEDURE CLICK
      getstateformats('OH', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\OH\OHStateReports') WITH m.goapp, 'OHForm10Summary.scx', 'OH'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS OHForm10Print AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Print Form 10 Report]

   PROCEDURE CLICK
      getstateformats('OH', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\OH\OHStateReports') WITH m.goapp, 'OHForm10Rpt.scx', 'OH'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS OHForm10Mag AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Form 10 Ma\<gnetic File]

   PROCEDURE CLICK
      getstateformats('OH', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\OH\OHStateReports') WITH m.goapp, 'OHForm10Mag.scx', 'OH'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS OHForm6Create AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Create Form 6 File]

   PROCEDURE CLICK
      getstateformats('OH', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\OH\OHStateReports') WITH m.goapp, 'OHForm6Create.scx', 'OH'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS OHForm6Modify AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Modify Form 6 File]

   PROCEDURE CLICK
      getstateformats('OH', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\OH\OHStateReports') WITH m.goapp, 'OHForm6Modify.scx', 'OH'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS OHForm6Owners AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Modify Form 6 Owner File]

   PROCEDURE CLICK
      getstateformats('OH', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\OH\OHStateReports') WITH m.goapp, 'OHForm6Owners.scx', 'OH'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS OHForm6Summary AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Form 6/6A Summary]

   PROCEDURE CLICK
      getstateformats('OH', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\OH\OHStateReports') WITH m.goapp, 'OHForm6Summary.scx', 'OH'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS OHForm6Print AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Print Form 6/6A]

   PROCEDURE CLICK
      getstateformats('OH', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\OH\OHStateReports') WITH m.goapp, 'OHForm6Print.scx', 'OH'
   ENDPROC
ENDDEFINE
*===============================================================================
DEFINE CLASS OHFormSV3 AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Print Form SV3 & SV3A]

   PROCEDURE CLICK
      getstateformats('OH', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\OH\OHStateReports') WITH m.goapp, 'OHSV3.scx', 'OH'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS OHFormSV3Remove AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Remove Cost Recovery Adjustments]
   cOnClickCommand = [do ohsv3remove]
ENDDEFINE

*===============================================================================
DEFINE CLASS OHFormSV6 AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [OH SV-6 Data Upload File]

   PROCEDURE CLICK
      getstateformats('OH', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\OH\OHStateReports') WITH m.goapp, 'OHSV3File.scx', 'OH'
   ENDPROC
ENDDEFINE



*===============================================================================
DEFINE CLASS PA_Reports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [\<Pennsylvania  Reports]
   cPopupName = [PA_Reports]
   cSkipFor   = [NOT m.goApp.lPARpts]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('PAStateAcctNumber', '', 'PAStateAcctNumber')
         .AddSeparatorBar()
         .AddBar('PAAnnualProdCreate', '', 'PAAnnualProdCreate')
         .AddBar('PAAnnualProdModify', '', 'PAAnnualProdModify')
         .AddBar('PAAnnualProdPrint', '', 'PAAnnualProdPrint')
         .AddSeparatorBar()
         .AddBar('PADisposalFacility', '', 'PADisposalFacility')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS PAStateAcctNumber AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [State Account Setup]
   cOnClickCommand = [m.gostatemanager.openformmulti('stateaccounts.scx','PA')]
ENDDEFINE

*===============================================================================
DEFINE CLASS PAAnnualProdCreate AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<Create Annual File]

   PROCEDURE CLICK
      getstateformats('PA', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\PA\PAStateReports') WITH m.goapp, 'PAProdCreate.scx', 'PA'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS PAAnnualProdModify AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<Modify Annual File]

   PROCEDURE CLICK
      getstateformats('PA', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\PA\PAStateReports') WITH m.goapp, 'PAProdUpd.scx', 'PA'
   ENDPROC

ENDDEFINE

*===============================================================================
DEFINE CLASS PAAnnualProdPrint AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<Print Annual Report]

   PROCEDURE CLICK
      getstateformats('PA', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\PA\PAStateReports') WITH m.goapp, 'PAProdReport.scx', 'PA'
   ENDPROC

ENDDEFINE

*===============================================================================
DEFINE CLASS PADisposalFacility AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Setup \<Brine Disposal Facilities]

   PROCEDURE CLICK
      getstateformats('PA', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\PA\PAStateReports') WITH m.goapp, 'padisposal.scx', 'PA'
   ENDPROC

ENDDEFINE

*===============================================================================
DEFINE CLASS TX_Reports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [\<Texas Reports]
   cPopupName = [TexasRepor]
   cSkipFor   = [NOT m.goApp.lTXRpts]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('TXStateAcctNumber', '', 'TXStateAcctNumber')
         .AddSeparatorBar()
         .AddBar('TXPRFileCreate', '', 'TXPRFileCreate')
         .AddBar('TXPRFileModify', '', 'TXPRFileModify')
         .AddBar('TXPRReport', '', 'TXPRReport')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS TXStateAcctNumber AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [State Account Setup]
   cOnClickCommand = [m.gostatemanager.openformmulti('stateaccounts.scx','TX')]
ENDDEFINE

*===============================================================================
DEFINE CLASS TXPRFileCreate AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Build PR File]

   PROCEDURE CLICK
      getstateformats('TX', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\TX\TXStateReports') WITH m.goapp, 'TXPRCreate.scx', 'TX'

   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS TXPRFileModify AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Modify PR File]

   PROCEDURE CLICK
      getstateformats('TX', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\TX\TXStateReports') WITH m.goapp, 'TXPRUpd.scx', 'TX'

   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS TXPRReport AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Print PR Report]

   PROCEDURE CLICK
      getstateformats('TX', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\TX\TXStateReports') WITH m.goapp, 'TXPRReport.scx', 'TX'

   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS WV_Reports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [\<West Virginia Reports]
   cPopupName = [WV_Reports]
   cSkipFor   = [NOT m.goApp.lWVRpts]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('WVStateAcctNumber', '', 'WVStateAcctNumber')
         .AddBar('WVMissingNRAs', '', 'WVMissingNRAs')
         .AddSeparatorBar()
         .AddBar('WVOperReturnCreate', '', 'WVOperReturnCreate')
         .AddBar('WVOperReturnModify1', '', 'WVOperReturnModify1')
         .AddBar('WVOperReturnModify2', '', 'WVOperReturnModify2')
         .AddBar('WVOperReturnPrint', '', 'WVOperReturnPrint')
         .AddBar('WVNotaryPrint', '', 'WVNotaryPrint')
         .AddSeparatorBar()
         .AddBar('WV400', '', 'WV400')
         .AddBar('WVWR_39', '', 'WVWR_39')
         .AddBar('WVWR_99', '', 'WVWR_99')
         .AddBar('WVInspect', '', 'WVInspect')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS WVStateAcctNumber AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [State Account Setup]

   PROCEDURE CLICK
      getstateformats('WV', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\WV\WVStateReports') WITH m.goapp, 'stateaccounts.scx', 'WV'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS WVMissingNRAs AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Missing NRA Number Report]
   PROCEDURE CLICK
      DO (m.goapp.cRptsFolder + 'StateReports\WV\WVStateReports') WITH m.goapp, 'WVMissingNRAs', 'WV'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS WVOperReturnCreate AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Create Producer/Operator Return]

   PROCEDURE CLICK
      getstateformats('WV', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\WV\WVStateReports') WITH m.goapp, 'WVAnnualRetCreate.scx', 'WV'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS WVOperReturnModify1 AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Modify Producer/Operator Return (Sch 2)]

   PROCEDURE CLICK
      getstateformats('WV', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\WV\WVStateReports') WITH m.goapp, 'WVAnnualRetSch2.scx', 'WV'
   ENDPROC

ENDDEFINE

*===============================================================================
DEFINE CLASS WVOperReturnModify2 AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Modify Producer/Operator Return (Sch3)]

   PROCEDURE CLICK
      getstateformats('WV', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\WV\WVStateReports') WITH m.goapp, 'WVAnnualRetSch3.scx', 'WV'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS WVOperReturnPrint AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Print Producer/Operator Return/Create WV EZ OG File]

   PROCEDURE CLICK
      getstateformats('WV', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\WV\WVStateReports') WITH m.goapp, 'WVAnnualRetPrint.scx', 'WV'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS WVInspect AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Print WV Inspection Form]

   PROCEDURE CLICK
      getstateformats('WV', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\WV\WVStateReports') WITH m.goapp, 'WVInspect.scx', 'WV'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS WVNotaryPrint AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Print \<Notary Page]

   PROCEDURE CLICK
      LOCAL loError, llReturn

      llReturn = .T.

      TRY
         getstateformats('WV', .T.)
         CREATE CURSOR temp (junk c(1))
         junk = 'a'
         INSERT INTO temp FROM MEMVAR
         REPORT FORM (m.goapp.cRptsFolder + 'StateReports\WV\WV_Notary.frx') TO PRINTER PROMPT PREVIEW NOCONSOLE NOEJECT
      CATCH TO loError
         MESSAGEBOX('Error sending the report to the printer!' + CHR(10) + ;
            loError.MESSAGE, 64, 'Error Printing')
      ENDTRY
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS WV400 AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [WV Sev 400 File]

   PROCEDURE CLICK
      getstateformats('WV', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\WV\WVStateReports') WITH m.goapp, 'wvsev400.scx', 'WV'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS WVWR_39 AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Print WR-\<39 Report (Monthly Production Report)]

   PROCEDURE CLICK
      getstateformats('WV', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\WV\WVStateReports') WITH m.goapp, 'WVWR39.scx', 'WV'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS WVWR_99 AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Print WR-\<99 Report (Annual)]

   PROCEDURE CLICK
      getstateformats('WV', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\WV\WVStateReports') WITH m.goapp, 'WVWR99', 'WV'
   ENDPROC
ENDDEFINE



*===============================================================================
DEFINE CLASS WY_Reports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [W\<yoming Reports]
   cPopupName = [WY_Reports]
   cSkipFor   = [NOT m.goApp.lWYRpts]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('WYStateAcctNumber', '', 'WYStateAcctNumber')
         .AddSeparatorBar()
         .AddBar('WYConservationRpt', '', 'WYConservationRpt')
         .AddBar('WYSevTaxRpt', '', 'WYSevTaxRpt')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS WYStateAcctNumber AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [State Account Setup]
   cOnClickCommand = [m.gostatemanager.openformmulti('stateaccounts.scx','WY')]
ENDDEFINE

*===============================================================================
DEFINE CLASS WYConservationRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Conservation Tax Report]

   PROCEDURE CLICK
      getstateformats('WY', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\WY\WYStateReports') WITH m.goapp, 'WYConsTax.scx', 'WY'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS WYSevTaxRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Severance Tax Report]

   PROCEDURE CLICK
      getstateformats('WY', .T.)
      DO (m.goapp.cRptsFolder + 'StateReports\WY\WYStateReports') WITH m.goapp, 'WYSevTax.scx', 'WY'
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
*===============================================================================
DEFINE CLASS Asset_Reports AS SFBar OF SFMenu.vcx
*===============================================================================
*===============================================================================
   cCaption   = [Asset Reports]
   cPopupName = [AssetReports]
   cSkipFor   = [NOT m.goApp.lGLreports]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('BillingCodeRpt', '', 'BillingCodeRpt')
         .AddBar('InventoryValRpt', '', 'InventoryValRpt')
         .AddBar('InventoryCounts', '', 'InventoryCounts')
         .AddSeparatorBar()
         .AddBar('FixedAssetRpt', '', 'FixedAssetRpt')
      ENDWITH
   ENDPROC
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS BillingCodeRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Inventory/Billing Code \<Listing]
   cOnClickCommand = [m.goStateManager.openformmulti('inlist.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS InventoryValRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Inventory \<Valuation Report]
   cOnClickCommand = [m.goStateManager.openformmulti('invalue.scx')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS InventoryCounts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Inventory \<Counts Report]
   cOnClickCommand = [m.goStateManager.openformmulti('inlist.scx','Count')]
ENDDEFINE

*AM
*===============================================================================
DEFINE CLASS FixedAssetRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Fixed Asset Listing]
   cOnClickCommand = [m.goStateManager.openformmulti('glassetrpt.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS Graphing AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [Graphing]
   cPopupName = [Graphing]
   cSkipFor   = [not m.goapp.lRevDistReports]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('ProductionGraphs', '', 'ProductionGraphs')
         .AddBar('RevExpGraphs', '', 'RevExpGraphs')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS ProductionGraphs AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Production Graphs]
   cOnClickCommand = [m.gostatemanager.openformmulti('dmgraphprod.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS RevExpGraphs AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Revenue/Expense Graphs]
   cOnClickCommand = [m.gostatemanager.openformmulti('dmgraphwell.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS OtherReports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [O\<ther Reports]
   cPopupName = [OtherReports]
   cSkipFor   = [not m.goapp.lRevDistReports and not m.goapp.lJIBReports  and not m.goapp.lAdmin]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('OthExpCodeRpt', '', 'OthExpCodeRpt')
         .AddBar('OthRevCodeRpt', '', 'OthRevCodeRpt')
         .AddBar('OthPreferencerpt', '', 'OthPreferencerpt')
         .AddBar('OthMeterRpt', '', 'OthMeterRpt')

         IF m.goapp.lAMVersion
            .AddBar('OthRecurRpt', '', 'OthRecurRpt')
         ENDIF

         .AddBar('OthPumperRpt', '', 'OthPumperRpt')
         .AddBar('OthPurchaserRpt', '', 'OthPurchaserRpt')
         .AddSeparatorBar()
         .AddBar('OthClosedRunRpt', '', 'OthClosedRunRpt')
         .AddBar('OthRevCloseRpt', '', 'OthRevCloseRpt')
         .AddBar('OthJIBCloseRpt', '', 'OthJIBCloseRpt')
         .AddBar('OthDirDepRpt', '', 'OthDirDepRpt')
         .AddSeparatorBar()
         .AddBar('OldSuspRpt', '', 'OldSuspRpt')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS OthExpCodeRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Expense Code Listing]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrexplist.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS OthRevCodeRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Re\<venue Category Listing]
   cOnClickCommand = [Revcat_Report()]
ENDDEFINE

*===============================================================================
DEFINE CLASS OthPreferencerpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Preferences Listing]
   cOnClickCommand = [Prefs_Report()]
ENDDEFINE

*===============================================================================
DEFINE CLASS OthMeterRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Meter Listing]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrmlist.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS OthRecurRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Rec\<urring Transactions]
   cOnClickCommand = [m.goStateManager.openformmulti('glrecurrpt.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS OthPumperRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Pumper Listing]
   cOnClickCommand = [Pumpers_Report()]
ENDDEFINE

*===============================================================================
DEFINE CLASS OthPurchaserRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [P\<urchaser Listing]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrrevsrc.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS OthClosedRunRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Closed Run Listing]
   cOnClickCommand = [ClosedRun_Report()]
ENDDEFINE

*===============================================================================
DEFINE CLASS OthRevCloseRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Revenue Run Closing Summary]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrrevclose.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS OthJIBCloseRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<JIB Run Closing Summary]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrjibclose.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS OthDirDepRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Direct Deposit Entries Report]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrrevclose.scx',.t.)]
ENDDEFINE

*===============================================================================
DEFINE CLASS OldSuspRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Pre-2010 Suspense Reports]
   cOnClickCommand = [m.goStateManager.openformmulti('dmrsusprpt.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS CustomReports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [Custom Reports]
   cPopupName = [CustomReports]

ENDDEFINE

*===============================================================================
DEFINE CLASS AdvancedReporting AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [Advanced Reporting]
   cPopupName = [AdvancedReporting]
   cSkipFor   = [not m.goapp.lAdhocReporting and not m.goapp.lAdmin]

   PROCEDURE CLICK
      IF FILE(m.goapp.cQueryFolder + 'sfquery.exe')

         lcCmd = m.goapp.cQueryFolder + [sfquery.exe ] + ["database=] + m.goapp.cIDComp + ["]
         !/n1 &lcCmd
      ENDIF
   ENDPROC
ENDDEFINE
*===============================================================================
DEFINE CLASS Utilities AS SFPad OF SFMenu.vcx
*===============================================================================
   cCaption   = [\<Utilities]
   cPopupName = [Utilities]
   cSkipFor   = [not m.goapp.lopencompany or m.goApp.lExpired or m.goApp.lReadOnly]

   PROCEDURE AddBars
      WITH THIS


         .AddBar('logins', '', 'logins')

         IF NOT m.goapp.lCloudServer
            .AddSeparatorBar()
            .AddBar('ModifyReports', '', 'ModifyReports')
         ENDIF

         IF m.goapp.lAMVersion
            .AddSeparatorBar()
            .AddBar('OpenFiscalPeriod', '', 'OpenFiscalPeriod')
         ENDIF

         .AddSeparatorBar()
         .AddBar('OpenRevRun', '', 'OpenRevRun')
         .AddBar('OpenJIBRun', '', 'OpenJIBRun')

         .AddSeparatorBar()
         .AddBar('DataUtilities', '', 'DataUtilities')

         .AddSeparatorBar()
         .AddBar('DOIUtilities', '', 'DOIUtilities')

         .AddSeparatorBar()
         .AddBar('BackoutFixed', '', 'BackoutFixed')

         IF m.goapp.lPluggingModule
            .AddBar('BackoutPlugging', '', 'BackoutPlugging')
         ENDIF

         IF m.goapp.lPartnershipMod
            .AddSeparatorBar()
            .AddBar('CreateJVPosting', '', 'CreateJVPosting')
         ENDIF

         .AddSeparatorBar()
         .AddBar('ClearOwnerSusp', '', 'ClearOwnerSusp')
         .AddBar('ClearPaidSusp', '', 'ClearPaidSusp')
         .AddSeparatorBar()
         .AddBar('SwitchTaxWH', '', 'SwitchTaxWH')
         .AddBar('FileCopy', '', 'FileCopy')

         IF m.goapp.lDirDMDep
            .AddSeparatorBar()
            .AddBar('CreateACHFile', '', 'CreateACHFile')
         ENDIF

         IF NOT m.goapp.lQBVersion AND m.goapp.lCashData
            .AddSeparatorBar()
            .AddBar('ChangeReconDates', '', 'ChangeReconDates')
            .AddBar('DeleteRecon', '', 'DeleteRecon')
         ENDIF

         IF m.goapp.lDMVersion
            .AddSeparatorBar()
            .AddBar('ExportToQB', '', 'ExportToQB')
         ENDIF

         .AddSeparatorBar()

         IF m.goapp.lOffBackup AND m.goapp.loffsitebackup
            .AddBar('ManageOffsite', '', 'ManageOffsite')
         ENDIF

         IF m.goapp.lOnlineReports AND m.goapp.lOnlinereporting
            .AddBar('OnlineRptsUpload', '', 'OnlineRptsUpload')
         ENDIF

         .AddBar('EnergyLinkApp', '', 'EnergyLinkApp')

         IF m.goapp.lQBVersion
            .AddSeparatorBar()
            .AddBar('SyncToQB', '', 'SyncToQB')
            .AddBar('ValidateQBAccounts', '', 'ValidateQBAccounts')
            .AddBar('UnpostFromQB', '', 'UnpostFromQB')
         ENDIF

         .AddSeparatorBar()
         .AddBar('Special', '', 'Special')

      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS UTReindex AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Re-Inde\<x Files]

   PROCEDURE CLICK
      LOCAL oMeta, llUseOK

      IF swOpenForms()
         MESSAGEBOX('All forms must be closed before reindexing the files.', 16, 'Reindex Error')
         RETURN
      ENDIF

      llUseOK    = .T.
      lcDataBase = TRIM(m.goapp.cdatafilepath) + 'AppData'

      swselect('disbhist')

      llUseOK = FLOCK('Disbhist')

      UNLOCK IN disbhist

      CLOSE DATABASES ALL

      IF llUseOK
         OPEN DATABASE (lcDataBase)
         oMeta = NEWOBJECT('DBCXMgr', 'DBCXMGR.VCX', '', .F. )
         IF TYPE('oMeta') # 'O' OR ISNULL(oMeta)
* Display error message and exit, because DBCX cannot be used.
            MESSAGEBOX('The DBCX is not available', 16, 'Error Loading DBCX')
            RETURN .F.
         ENDIF

         oMeta.SetDatabase(DBC())

         oMeta.oSDTMgr.REINDEX()

         RELE oMeta
      ELSE
         MESSAGEBOX("This company's files are in use by another user.  Have everyone logout and try again...")
      ENDIF
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS UTUpdateFiles AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Update Files]

   PROCEDURE CLICK
      IF swOpenForms()
         MESSAGEBOX('All open forms must be closed before updating the files.', 16, 'Close All Forms')
         RETURN
      ENDIF

      DO swUpdate
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS UTResetRemind AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Reset Automatic Update Reminder]

   PROCEDURE CLICK
      m.goapp.resetremind()
      WAIT WINDOW NOWAIT 'Reset of automatic update reminder complete'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Logins AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Logged In Users]
   cOnClickCommand = [m.gostatemanager.openformmulti('logins.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS CheckSetup AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Chec\<k Setup]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('APCheckSetup', '', 'APCheckSetup')

         IF m.goapp.lAMVersion
            IF m.goapp.lPayrollOpt
               .AddBar('PRCheckSetup', '', 'PRCheckSetup')
            ENDIF
         ENDIF

         .AddBar('DMCheckSetup', '', 'DMCheckSetup')

         IF m.goapp.lLandOpt
            .AddBar('LMCheckSetup', '', 'LMCheckSetup')
         ENDIF

         IF m.goapp.lprogopt
            .AddBar('PDCheckSetup', '', 'PDCheckSetup')
         ENDIF
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS ModifyReports AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Modify Reports]
   PROCEDURE AddBars
      WITH THIS
         .AddBar('CheckSetup', '', 'CheckSetup')
         .AddBar('ModifyReportSetup', '', 'ModifyReportSetup')
         .AddBar('ModifyInvoices', '', 'ModifyInvoices')
         .AddSeparatorBar()
         .AddBar('Ten99Setup', '', 'Ten99Setup')
         .AddBar('DownloadOwnStmts', '', 'DownloadOwnStmts')
         IF m.goapp.lK1Opt
            .AddBar('Download1065K1', '', 'Download1065K1')
         ENDIF
      ENDWITH
ENDDEFINE
*===============================================================================
DEFINE CLASS DMCheckSetup AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Revenue Distribution Check]
   cOnClickCommand = [do modicheck with 'DM']
ENDDEFINE

*===============================================================================
DEFINE CLASS APCheckSetup AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Vendor Check]
   cOnClickCommand = [do modicheck with 'AP']
ENDDEFINE

*===============================================================================
DEFINE CLASS PRCheckSetup AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Payroll Check]
   cOnClickCommand = [do modicheck with 'PR']
ENDDEFINE

*===============================================================================
DEFINE CLASS LMCheckSetup AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Delay Rental Check]
   cOnClickCommand = [do modicheck with 'LM']
ENDDEFINE

*===============================================================================
DEFINE CLASS PDCheckSetup AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Partnership/Joint Venture Check]
   cOnClickCommand = [do modicheck with 'PD']
ENDDEFINE

*===============================================================================
DEFINE CLASS ModifyReportSetup AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [M\<odify Report Setup]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('ModOwnerStmts', '', 'ModOwnerStmts')
         .AddBar('ModLabels', '', 'ModLabels')
         .AddBar('ModStubStmt', '', 'ModStubStmt')

         IF m.goapp.lAFEOpt
            .AddBar('ModAFEOwner', '', 'ModAFEOwner')
         ENDIF

         IF m.goapp.lAMVersion
            .AddBar('CustomerStmts', '', 'CustomerStmts')
         ENDIF

         .AddBar('DivOrder', '', 'DivOrder')
         .AddBar('DivOrder1Page', '', 'DivOrder1Page')

         IF m.goapp.lPayrollOpt
            .AddBar('W2Setup', '', 'W2Setup')
         ENDIF
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS ModOwnerStmts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Modify Owner \<Statements]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('ModStmt1', '', 'ModStmt1')
         .AddBar('ModStmt2', '', 'ModStmt2')
         .AddBar('ModStmt3', '', 'ModStmt3')
         .AddBar('ModStmt4', '', 'ModStmt4')
         .AddBar('ModStmt5', '', 'ModStmt5')
         .AddBar('ModStmt6', '', 'ModStmt6')
         .AddBar('ModStmt7', '', 'ModStmt7')
         .AddBar('ModStmt8', '', 'ModStmt8')
         .AddSeparatorBar()
         .AddBar('ModJIBStmt1', '', 'ModJIBStmt1')
         .AddBar('ModJIBStmt2', '', 'ModJIBStmt2')
         .AddBar('ModJIBStmt3', '', 'ModJIBStmt3')
         .AddBar('ModJIBStmt4', '', 'ModJIBStmt4')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS ModStmt1 AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Owner Statements (Standard)]
   cOnClickCommand = [DO modirepo WITH 'OSTMT1']
ENDDEFINE

*===============================================================================
DEFINE CLASS ModStmt2 AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Owner Statements (Standard)(Duplex)]
   cOnClickCommand = [DO modirepo WITH 'OSTMT2']
ENDDEFINE

*===============================================================================
DEFINE CLASS ModStmt3 AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Owner Statements (Standard Tax Code Subtotal)]
   cOnClickCommand = [DO modirepo WITH 'OSTMT3']
ENDDEFINE

*===============================================================================
DEFINE CLASS ModStmt4 AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Owner Statements (Standard Tax Code Subtotal)(Duplex)]
   cOnClickCommand = [DO modirepo WITH 'OSTMT4']
ENDDEFINE

*===============================================================================
DEFINE CLASS ModStmt5 AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Owner Statements (Compressed Standard)]
   cOnClickCommand = [DO modirepo WITH 'OSTMT5']
ENDDEFINE

*===============================================================================
DEFINE CLASS ModStmt6 AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Owner Statements (Compressed Standard)(Duplex)]
   cOnClickCommand = [DO modirepo WITH 'OSTMT6']
ENDDEFINE

*===============================================================================
DEFINE CLASS ModStmt7 AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Owner Statements (Compressed Tax Code Subtotal)]
   cOnClickCommand = [DO modirepo WITH 'OSTMT7']
ENDDEFINE

*===============================================================================
DEFINE CLASS ModStmt8 AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Owner Statements (Compressed Tax Code Subtotal)(Duplex)]
   cOnClickCommand = [DO modirepo WITH 'OSTMT8']
ENDDEFINE

*===============================================================================
DEFINE CLASS ModJIBStmt1 AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Modify Owner \<JIB Statement]
   cOnClickCommand = [DO MODIREPO WITH 'JIBRUN']
ENDDEFINE

*===============================================================================
DEFINE CLASS ModJIBStmt2 AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Modify Owner JIB Statement (2nd Sort)]
   cOnClickCommand = [DO modirepo with 'JIBSORT']
ENDDEFINE

*===============================================================================
DEFINE CLASS ModJIBStmt3 AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Modify Owner JIB Summary By Well]
   cOnClickCommand = [DO modirepo with 'JIBSUM']
ENDDEFINE

*===============================================================================
DEFINE CLASS ModJIBStmt4 AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Modify Owner JIB Summary By Category]
   cOnClickCommand = [DO modirepo with 'JIBCAT']
ENDDEFINE

*===============================================================================
DEFINE CLASS ModLabels AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Modify Owner Labels]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('ModDotMatrix', '', 'ModDotMatrix')
         .AddBar('ModLaser', '', 'ModLaser')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS ModDotMatrix AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Dot-Matrix Labels]
   cOnClickCommand = [DO modirepo WITH 'OWNLABD']
ENDDEFINE

*===============================================================================
DEFINE CLASS ModLaser AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Laser Labels]
   cOnClickCommand = [DO modirepo WITH 'OWNLABL']
ENDDEFINE

*===============================================================================
DEFINE CLASS ModStubStmt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Modify Owner Stu\<b Statement]
   cOnClickCommand = [DO MODIREPO WITH 'OWNSTUB']
ENDDEFINE

*===============================================================================
DEFINE CLASS ModAFEOwner AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Modify \<AFE Owner Presentation]
   cOnClickCommand = [DO modirepo with 'AFEOWNRPT1']
ENDDEFINE

*===============================================================================
DEFINE CLASS CustomerStmts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Customer Statements]
   cOnClickCommand = [do modirepo with 'CUSTSTMT']
ENDDEFINE

*===============================================================================
DEFINE CLASS ModifyInvoices AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Modify \<Invoices]

   PROCEDURE AddBars
      WITH THIS
         IF m.goapp.lAMVersion
            .AddBar('ModSalesInv', '', 'ModSalesInv')
         ENDIF

         IF m.goapp.lHouseGasOpt
            .AddBar('ModHGInv', '', 'ModHGInv')
         ENDIF

         IF m.goapp.lBrineOpt
            .AddBar('ModBrineInv', '', 'ModBrineInv')
         ENDIF

      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS ModSalesInv AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Sales Invoice]
   cOnClickCommand = [do modirepo with 'ARINV']
ENDDEFINE

*===============================================================================
DEFINE CLASS ModHGInv AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [House Gas Invoice]
   cOnClickCommand = [do modirepo with 'HGINV']
ENDDEFINE

*===============================================================================
DEFINE CLASS ModBrineInv AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Brine Invoice]
   cOnClickCommand = [do modirepo with 'BMINV']
ENDDEFINE

*===============================================================================
DEFINE CLASS DivOrder AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Division Order]
   cOnClickCommand = [do modirepo with 'DIVORDM']
ENDDEFINE

*===============================================================================
DEFINE CLASS DivOrder1Page AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Division Order (1 Int per Page)]
   cOnClickCommand = [do modirepo with 'DIVORDS']
ENDDEFINE

*===============================================================================
DEFINE CLASS DivOrderAlt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Division Order (Alt)]
   cOnClickCommand = [do modirepo with 'DIVORDA']
ENDDEFINE

*===============================================================================
DEFINE CLASS W2Setup AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<W2 Setup]
   cOnClickCommand = [do modirepo with 'W2']
ENDDEFINE

*===============================================================================
DEFINE CLASS UnPostFromQB AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Remove Revenue Run From \<QuickBooks]
   cOnClickCommand = [m.gostatemanager.openformmulti('dmunqbpostr.scx')]
   cSkipFor        = [not m.goapp.oQB.lqbactive]
ENDDEFINE

*===============================================================================
DEFINE CLASS BackoutPlugging AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Back Out \<Plugging Charges]
   cOnClickCommand = [m.gostatemanager.openformmulti('pluggingback.scx')]
   cSkipFor        = [not m.goapp.lPluggingModule]
ENDDEFINE

*===============================================================================
DEFINE CLASS DownloadOwnStmts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Download Owner Statement Formats]
   cOnClickCommand = [GetOwnerStatements(.T.)]
ENDDEFINE

*===============================================================================
DEFINE CLASS Ten99Setup AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<1099 Setup]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('Download1099s', '', 'Download1099s')
         .AddBar('Modify1099s', '', 'Modify1099s')
         .AddBar('Modify1099nec', '', 'Modify1099nec')
         .AddSeparatorBar()
         .AddBar('ModifyMisc1099Repl', '', 'ModifyMisc1099Repl')
         .AddBar('ModifyMisc1099Repn', '', 'ModifyMisc1099Repn')
         .AddBar('ModifyMisc1099ReplW', '', 'ModifyMisc1099ReplW')
         .AddBar('Modify1099NECW', '', 'Modify1099NECW')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Download1099s AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Download New 1099 Formats]

   PROCEDURE CLICK
      DO Get1099Formats WITH .F., .T.
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Modify1099s AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Modify \<1099-Misc Format]
   PROCEDURE CLICK
      DO Get1099Formats
      DO MODIREPO WITH 'TENLAS'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Modify1099nec AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Modify \<1099-NEC Format]
   PROCEDURE CLICK
      DO Get1099Formats
      DO MODIREPO WITH 'TENNEC'
   ENDPROC
ENDDEFINE
*===============================================================================
DEFINE CLASS ModifyMisc1099Repl AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [\<Modify 1099-Misc Replacement]
   PROCEDURE CLICK
      DO Get1099Formats
      DO MODIREPO WITH '1099misc'
   ENDPROC
ENDDEFINE
*===============================================================================
DEFINE CLASS ModifyMisc1099Repn AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Modify 1099-NEC Replacement]
   cOnClickCommand = [do modirepo with '1099nec']
ENDDEFINE
*===============================================================================
DEFINE CLASS ModifyMisc1099ReplW AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Modify 1099-Misc Replacement by \<Well]
   PROCEDURE CLICK
      DO Get1099Formats
      DO MODIREPO WITH '1099miscw'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Modify1099NECW AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Modify 1099-NEC Replacement by \<Well]
   PROCEDURE CLICK
      DO Get1099Formats
      DO MODIREPO WITH '1099necw'
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Download1065k1 AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Download 1065/K1 Formats]
   cSkipFor = [NOT m.goApp.lK1Opt OR not m.goapp.lform1065reporting and not m.goapp.lAdmin]
   PROCEDURE CLICK
      DO form1065_k1_upd WITH .F., .T.
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS OpenFiscalPeriod AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Op\<en a Closed Fiscal Accounting Period]
   cOnClickCommand = [m.gostatemanager.openformmulti('glopenprd.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS OpenRevRun AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Open a Closed \<Revenue Run]
   cOnClickCommand = [m.gostatemanager.openformmulti('dmreopenr.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS OpenRevRunForce AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Open a Closed Revenue Run (\<Force)]

   PROCEDURE CLICK
      LOCAL oMessage

      oMessage = FindGlobalObject('cmMessage')
      lcpass   = TRANSFORM((MONTH(DATE()) * DAY(DATE())) + YEAR(DATE()))

      lcPassEntered = oMessage.gettext('Enter the Supervisor Password:', 'Password Required')

      IF ALLTRIM(lcpass) = ALLTRIM(lcPassEntered)
         m.goStateManager.OpenFormMulti('dmreopenr.scx',.T.)
      ENDIF

ENDDEFINE

*===============================================================================
DEFINE CLASS OpenJIBRun AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Open a Closed \<JIB Run]
   cOnClickCommand = [m.gostatemanager.openformmulti('dmreopenj.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS BackoutFixed AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Back Out Recurring Well Expenses]
   cOnClickCommand = [m.gostatemanager.openformmulti('dmfixback.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS DOIUtilities AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Division of Interest Utilities]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('CheckDOI', '', 'CheckDOI')
         .AddBar('CopyDOI', '', 'CopyDOI')
         .AddBar('TransferDOI', '', 'TransferDOI')
         .AddBar('TransferDOIRpt', '', 'TransferDOIRpt')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS DataUtilities AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Data Utilities]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('UTReindex', '', 'UTReindex')
         .AddBar('UTUpdateFiles', '', 'UTUpdateFiles')
         .AddSeparatorBar()
         .AddBar('USPSAddressNormalization', '', 'USPSAddressNormalization')
         .AddSeparatorBar()
         .AddBar('RepairFiles', '', 'RepairFiles')
         .AddBar('ResetCounters', '', 'ResetCounters')
         .AddSeparatorBar()
         .AddBar('ArchiveData', '', 'ArchiveData')


      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS CheckDOI AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Check Division of Interest]
   cOnClickCommand = [m.goStateManager.openformmulti('dmcheckdoi.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS USPSAddressNormalization AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [USPS Address Normalization]
   cOnClickCommand = [m.goStateManager.openformmulti('normaddr.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS CopyDOI AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Co\<py Division of Interest]
   cOnClickCommand = [m.goStateManager.openformmulti('dmdoicopy.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS TransferDOI AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Transfer DOI Between Owners]
   cOnClickCommand = [m.gostatemanager.openformmulti('dmdoitransfer.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS TransferDOIRpt AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Past DOI Transfer Report]
   cOnClickCommand = [m.gostatemanager.openformmulti('dmdoitransrpt.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS RecalcYTDITD AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Recalculate \<YTD and ITD Totals]

   PROCEDURE CLICK
      LOCAL ldDate

      oMessage = FindGlobalObject('cmMessage')

      IF oMessage.CONFIRM('Should last year be used for YTD totals?')
         ldDate = CTOD('01/01/' + TRANSFORM(YEAR(DATE()))) - 1
      ELSE
         ldDate = DATE()
      ENDIF

      DO calcytditd WITH ldDate, '**', .T.

   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS BuildInvHist AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Build \<History for Investment Wells]
   cOnClickCommand = [m.gostatemanager.openformmulti('dmbldinvhist.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ExportOwnStmts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Export Owner Statements]
   cOnClickCommand = [m.gostatemanager.openformmulti('dmexportstmt.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS CreateJVPosting AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Create JV Posting]
   cOnClickCommand = [m.gostatemanager.openformmulti('partpostrecreate.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ClearOwnerSusp AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Clear Owner Suspense]
   cOnClickCommand = [m.gostatemanager.openformmulti('dmclearsusp.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ClearPaidSusp AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Clear Paid Suspense]
   PROCEDURE CLICK
      osusp = CREATEOBJECT('suspense')
      IF MESSAGEBOX('Do you want a report of owners to be cleared from suspense? Choosing NO will actually clear the suspense!', 36, 'Clear Paid Suspense') = 6
         osusp.Clear_Paid_Suspense(.T.)
      ELSE
         IF MESSAGEBOX('Are you sure you want to clear the paid suspense?', 36, 'Clear Paid Suspense') = 6
            osusp.Clear_Paid_Suspense(.F.)
         ENDIF
      ENDIF
      osusp = .NULL.
   ENDPROC
   cOnClickCommand   = [m.gostatemanager.openformmulti('dmclearsusp.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS SwitchProdPeriod AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Switch Prod Period in a Closed Run]
   cOnClickCommand = [m.gostatemanager.openformmulti('dmswitchprod.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS SwitchTaxWH AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Switch State Tax Withholding Rate]
   cOnClickCommand = [m.gostatemanager.openformmulti('dmtaxswitch.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS FileCopy AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Copy \<Files to Another Company]
   cOnClickCommand = [m.gostatemanager.openformmulti('filecopy.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS CreateACHFile AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Re-Create Direc\<t Deposit ACH File]
   cOnClickCommand = [m.gostatemanager.openformmulti('dmdirectdep.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ChangeReconDates AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Chan\<ge Bank Reconciliation Dates]
   cOnClickCommand = [m.gostatemanager.openformmulti('csreconchg.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS DeleteRecon AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [De\<lete a Bank Reconcilation]
   cOnClickCommand = [m.gostatemanager.openformmulti('csrecondel.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ManageOffsite AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Manage Offsite Backups]
   cOnClickCommand = [m.gostatemanager.openformmulti('fileoffsite.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS OnlineRptsUpload AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [U\<pload Reports to Online Reporting]
   cOnClickCommand = [m.gostatemanager.openformmulti('dmronline.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS EnergyLinkApp AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Create EnergyLink File]
   cOnClickCommand = [m.gostatemanager.openformmulti('energylink.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS SyncToQB AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Synchronize List Files to QuickBooks]
   cOnClickCommand = [m.gostatemanager.openformmulti('qbsync.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ExportToQB AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Export Checks to QuickBooks]
   cOnClickCommand = [m.gostatemanager.openformmulti('qbexport.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ValidateQBAccounts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Validate QB Account Links]
   cSkipFor = [not m.goapp.lAdmin]

   PROCEDURE CLICK
      m.goapp.oQB.QBAcctCheck(.F., .T.)
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS ResetLeasePmts AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Reset Lease Pmt Totals]
   cSkipFor = [not m.goapp.lAdmin]

   PROCEDURE CLICK
*
* Resets the total payments to date in the landowner file
* based on the payments made in the landhist file
*
      swselect('landowner')
      swselect('landhist')

      SELECT  cownerid, ;
         cleaseid, ;
         SUM(npmtamount) AS ntotal ;
         FROM landhist ;
         INTO CURSOR temphist ;
         ORDER BY cownerid,;
         cleaseid ;
         GROUP BY cownerid,;
         cleaseid

      SELECT temphist
      SCAN
         SCATTER MEMVAR
         WAIT WINDOW NOWAIT 'Processing owner/lease: ' + m.cownerid + '/' + m.cleaseid
         SELECT landowner
         LOCATE FOR cownerid == m.cownerid AND cleaseid == m.cleaseid
         IF FOUND()
            REPLACE npmttodate WITH m.ntotal
         ENDIF
      ENDSCAN
      WAIT CLEAR
      MESSAGEBOX('Lease Obligation Payment Totals Have Been Updated.', 64, 'Update Pmts To Date')
   ENDPROC
ENDDEFINE


*===============================================================================
DEFINE CLASS SPECIAL AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Special Utilities]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('Security', '', 'Security')
         .AddBar('RemoveCompRecs', '', 'RemoveCompRecs')
         .AddBar('RemoveProgs', '', 'RemoveProgs')
         .AddSeparatorBar()
         .AddBar('Diagnostics', '', 'Diagnostics')
         .AddBar('EmailLog', '', 'EmailLog')
         .AddBar('GrossUnits', '', 'GrossUnits')

         .AddSeparatorBar()
         .AddBar('InstallFilesMsg', '', 'InstallFilesMsg')
         .AddBar('ResetLeasePmts', '', 'ResetLeasePmts')
         .AddBar('RecalcYTDITD', '', 'RecalcYTDITD')
         .AddBar('RecalcGross', '', 'RecalcGross')

         .AddSeparatorBar()
         .AddBar('BuildInvHist', '', 'BuildInvHist')
         .AddBar('ExportOwnStmts', '', 'ExportOwnStmts')

         IF m.goapp.lAMVersion
            .AddSeparatorBar()
            .AddBar('CloseFiscalYr', '', 'CloseFiscalYr')
            .AddBar('OpenFiscalYr', '', 'OpenFiscalYr')
            .AddSeparatorBar()
            .AddBar('GLMasterUpd', '', 'GLMasterUpd')
            .AddBar('CheckGLProbs', '', 'CheckGLProbs')
            .AddBar('GLBatches', '', 'GLBatches')
            .AddBar('GLClearing', '', 'GLClearing')
            
         ENDIF

         IF m.goapp.lPayrollOpt
            .AddSeparatorBar()
            .AddBar('PRTaxTables', '', 'PRTaxTables')
            .AddBar('PRW2Toggle', '', 'PRW2Toggle')
         ENDIF

         IF m.goapp.lCloudServer
            .AddSeparatorBar()
            .AddBar('ModifyReportsCloud', '', 'ModifyReportsCloud')
         ENDIF

         .AddSeparatorBar()
         .AddBar('FileStats', '', 'FileStats')
         .AddBar('UpdateAFECodes', '', 'UpdateAFECodes')

         IF m.goapp.lQBVersion
            .AddSeparatorBar()
            .AddBar('QBInterface', '', 'QBInterface')
         ENDIF

         IF m.goapp.lAdmin
            .AddSeparatorBar()
            .AddBar('OpenRevRunForce', '', 'OpenRevRunForce')
            .AddBar('CommandUtility', '', 'CommandUtility')
         ENDIF
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS ModifyReportsCloud AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Modify Reports]

   PROCEDURE AddBars

      WITH THIS
         .AddBar('CheckSetup', '', 'CheckSetup')
         .AddBar('ModifyReportSetup', '', 'ModifyReportSetup')
         .AddBar('ModifyInvoices', '', 'ModifyInvoices')
         .AddSeparatorBar()
         .AddBar('Ten99Setup', '', 'Ten99Setup')
         .AddBar('DownloadOwnStmts', '', 'DownloadOwnStmts')
         IF m.goapp.lK1Opt
            .AddBar('Download1065K1', '', 'Download1065K1')
         ENDIF
      ENDWITH
   ENDPROC
ENDDEFINE
*===============================================================================
DEFINE CLASS Security AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Enable/Disable Log In Form]

   PROCEDURE CLICK
      LOCAL lcpass, lnPass, lcdate, lndate, lnx, lnlen, lcPassEntered, oMessage, lnChk

      oMessage = FindGlobalObject('cmMessage')
      SET CENTURY ON
      lcdate = DTOC(DATE())
      lndate = 0

      lnlen = LEN(ALLTRIM(lcdate))

      FOR lnx = 1 TO lnlen
         lndate = lndate + VAL(SUBSTR(lcdate, lnx, 1))
      ENDFOR

      lndate = lndate

      lcpass = TRANSFORM((MONTH(DATE()) * DAY(DATE())) + YEAR(DATE()))

      lcPassEntered = oMessage.gettext('Enter the Supervisor Password:', 'Password Required')

      IF ALLTRIM(lcPassEntered) = ALLTRIM(lcpass)
         IF FILE(m.goapp.cCommonFolder + 'swi1215.cfg')
            ERASE (m.goapp.cCommonFolder + 'swi1215.cfg')
            oMessage.INFORM('Security has been enabled.')
         ELSE
            fh = FCREATE(m.goapp.cCommonFolder + 'swi1215.cfg')
            FCLOSE(fh)
            oMessage.INFORM('Security has been disabled.')
         ENDIF
      ELSE
         oMessage.warning('Invalid password entered. Please contact technical support for the password.')
      ENDIF
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS RemoveCompRecs AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Remove Companies with Missing Data]
   cOnClickCommand = [do remove_nonexistant_companies]

ENDDEFINE

*===============================================================================
DEFINE CLASS RemoveProgs AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Remove Programs From Suspense Records]
   cOnClickCommand = [do clearsuspprogs]

ENDDEFINE

*===============================================================================
DEFINE CLASS Diagnostics AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Enable Diagnostic Logging]

   PROCEDURE CLICK
      TRY
         IF FILE(m.goapp.cCommonFolder + 'diag.cfg')
            ERASE(m.goapp.cCommonFolder + 'diag.cfg')
            m.goapp.oLogger.lLoggingEnabled = .F.
            MESSAGEBOX('Diagnostic reporting has been disabled', 64, 'Diagnostics')
         ELSE
            lcString = 'diagnostics'
            STRTOFILE(lcString, m.goapp.cCommonFolder + 'diag.cfg')
            m.goapp.oLogger.lLoggingEnabled = .T.
            MESSAGEBOX('Diagnostic reporting has been enabled', 64, 'Diagnostics')
         ENDIF
      CATCH
      ENDTRY
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS GrossUnits AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Show/Hide Gross Units Check Box]

   PROCEDURE CLICK
      TRY
         IF FILE(m.goapp.cCommonFolder + 'grossunits.txt')
            ERASE(m.goapp.cCommonFolder + 'grossunits.txt')
            MESSAGEBOX('The gross units check box has been hidden', 64, 'Gross Units')
         ELSE
            lcString = 'Show Gross Units checkbox'
            STRTOFILE(lcString, m.goapp.cCommonFolder + 'grossunits.txt')
            MESSAGEBOX('The gross units check box has been made visible', 64, 'Gross Units')
         ENDIF
      CATCH
      ENDTRY
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS QBInterface AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Update QuickBooks \<Interface]
   PROCEDURE CLICK
      TRY
         oLink = CREATEOBJECT('hyperlink')
         oLink.NAVIGATETO('support.sherware.com/download/qbfc.exe')
      ENDTRY
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS InstallFilesMsg AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Turn Off Install Files Message]

   PROCEDURE CLICK
      oMessage = FindGlobalObject('cmMessage')
      IF FILE(m.goapp.cCommonFolder + 'ignorexfrx.txt')
         ERASE (m.goapp.cCommonFolder + 'ignorexfrx.txt')
         oMessage.INFORM('The message about installing files will be reinstated.')
      ELSE
         fh = FCREATE(m.goapp.cCommonFolder + 'ignorexfrx.txt')
         FCLOSE(fh)
         oMessage.INFORM('The message bout install files will be silenced.')
      ENDIF

   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS EmailLog AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Email Log]
   cOnClickCommand = [m.gostatemanager.openformmulti('emaillog.scx')]
ENDDEFINE
*===============================================================================
DEFINE CLASS ArchiveData AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Archive Data]
   cOnClickCommand = [m.gostatemanager.openformmulti('filearchive.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS CloseFiscalYr AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Close Fiscal Accounting Year]
   cOnClickCommand = [m.gostatemanager.openformmulti('glcloseyr.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS OpenFiscalYr AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Open Fiscal Accounting Year]
   cOnClickCommand = [m.gostatemanager.openformmulti('glopenyr.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS GLMasterUpd AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [G/L Master File Update]
   cOnClickCommand = [m.gostatemanager.openformmulti('glmastupd.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS CheckGLProbs AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Check G/L for Out of Balance Batches]
   cOnClickCommand = [do chkbal]
ENDDEFINE

*===============================================================================
DEFINE CLASS GLBatches AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Recreate G/L Batches File]
   cOnClickCommand = [m.goapp.Create_GLBatches(.T.)]
ENDDEFINE

*===============================================================================
DEFINE CLASS GLClearing AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [G/L Clearing Account Registers]
   cOnClickCommand = [m.gostatemanager.openformmulti('glclearingreg.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS PRTaxTables AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Download Payroll Tax Tables]
   cOnClickCommand = [do ('prtaxtableupd') with .F.,.T.]
ENDDEFINE

*===============================================================================
DEFINE CLASS PRW2Toggle AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Toggle State Payer Codes In W2s]

   PROCEDURE CLICK
      IF FILE('datafiles\w2ignorestate.txt')
         ERASE ('datafiles\w2ignorestate.txt')
         MESSAGEBOX('State Payer Codes will be used in W2s now.', 0, 'State Payer Codes (W2s)')
      ELSE
         lcx = 'x'
         STRTOFILE(lcx, 'datafiles\w2ignorestate.txt')
         MESSAGEBOX('State Payer Codes will NOT be used in W2s now.', 0, 'State Payer Codes (W2s)')
      ENDIF
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS FileStats AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [View File Statistics]
   cOnClickCommand = [m.gostatemanager.openformmulti('companystats.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS ResetCounters AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Reset File Counters]
   cOnClickCommand = [m.goapp.resetcounters(.T.)]
ENDDEFINE

*===============================================================================
DEFINE CLASS RecalcGross AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Recalculate Gross Amounts]

   PROCEDURE CLICK
      IF MESSAGEBOX('Do you want to recalculate the gross revenue and expense ' + ;
            'amounts to account for any dummy owner, direct paid owner or tax exempt owner changes?', 36, 'Recalc Gross Amounts') = 6
         llReturn = RecalcGross()
         IF NOT llReturn
            MESSAGEBOX('Unable to recalc the gross at this time. Please try again later.', 0, 'Recalc Gross Amounts')
         ELSE
            MESSAGEBOX('Finished Recalculating the Gross Amounts.', 0, 'Recalc Gross Amounts')
         ENDIF
      ENDIF
   ENDPROC

ENDDEFINE

*===============================================================================
DEFINE CLASS RepairFiles AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption      = [Repair Files]

   PROCEDURE CLICK
      lcpass = m.goapp.oMessage.gettext('Enter the support password')

      jcPass = TRANSFORM(MONTH(DATE()) * DAY(DATE()) + YEAR(DATE()))

      IF ISNULL(lcpass)
         RETURN .F.
      ENDIF

      IF ALLTRIM(lcpass) # ALLTRIM(jcPass)
         MESSAGEBOX('You entered an invalid password. The Repair Utility cannot be used.', 16, 'Security Failure')
         RETURN .F.
      ENDIF

      IF swOpenForms()
         MESSAGEBOX('All forms must be closed before repairing the files.', 16, 'Repair Error')
         RETURN
      ENDIF

      llUseOK    = .T.
      lcDataBase = TRIM(m.goapp.cdatafilepath) + 'AppData'

      IF NOT USED('disbhist')
         USE disbhist IN 0
      ENDIF

      llUseOK = FLOCK('Disbhist')

      m.goapp.closealldata()

      IF llUseOK
         m.goapp.opensdt()

         OPEN DATABASE (lcDataBase)

         oMeta.SetDatabase(DBC())

         oMeta.oSDTMgr.Repair()

      ELSE
         MESSAGEBOX("This company's files are in use by another user.  Have everyone logout and try again...")
      ENDIF

   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS UpdateAFECodes AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Update AFE Codes]
   cOnClickCommand = [m.goapp.fixafeno(.t.,.t.)]
ENDDEFINE

*===============================================================================
DEFINE CLASS FileIntegrity AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [File Integrity Check]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('FileIntegrityCheck', '', 'FileIntegrityCheck')
         .AddBar('FileIntegrityReport', '', 'FileIntegrityReport')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS FileIntegrityCheck AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [File Integrity Check]

   PROCEDURE CLICK

      lcpass = m.goapp.oMessage.gettext('Enter the support password')

      jcPass = TRANSFORM(MONTH(DATE()) * DAY(DATE()) + YEAR(DATE()))

      IF ISNULL(lcpass)
         RETURN .F.
      ENDIF

      IF ALLTRIM(lcpass) # ALLTRIM(jcPass)
         MESSAGEBOX('You entered an invalid password. The command utility cannot be used.', 16, 'Security Failure')
         RETURN .F.
      ENDIF

      DO dupsuspfix WITH .T.
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS FileIntegrityReport AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [File Integrity Report]

   PROCEDURE CLICK

      TRY
         USE (m.goapp.cdatafilepath + 'delrpt') IN 0


         SELECT delrpt
         lcTitle1                           = 'File Integrity Check'
         lcTitle2                           = ''
         lcSelectCriteria                   = ''
         lcSortOrder                        = ''
         m.ctypeinv                         = ''
         m.goapp.oReport.cAlias             = 'delrpt'
         m.goapp.oReport.DATASESSIONID      = 1
         m.goapp.oReport.cReportName        = 'commonsource\dmrodups.frx'
         m.goapp.oReport.cTitle1            = lcTitle1
         m.goapp.oReport.cTitle2            = lcTitle2
         m.goapp.oReport.cProcessor         = ''
         m.goapp.oReport.cSortOrder         = ''
         m.goapp.oReport.cSelectionCriteria = ''
         m.goapp.oReport.CSVFilename        = ''
         m.goapp.oReport.cFriendlyName      = 'File Integrity Check'
         llReturn                           = m.goapp.oReport.SendReport('S', .F., .F.)
      CATCH TO loErr
         MESSAGEBOX('There were no issues to report on', 64, 'File Integrity Check')
      ENDTRY
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS CommandUtility AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Command Utility]
   cOnClickCommand = [m.goStateManager.OpenModalForm('command.scx')]
ENDDEFINE

*===============================================================================
*===============================================================================
*===============================================================================
DEFINE CLASS NAVIGATE AS SFPad OF SFMenu.vcx
*===============================================================================
*===============================================================================
*===============================================================================
   cCaption   = [\<Navigate]
   cKey       = [ALT+N]
   cPopupName = [Navigate]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('First', '', 'First')
         .AddBar('Prior', '', 'Prior')
         .AddBar('Next', '', 'Next')
         .AddBar('Last', '', 'Last')
         .AddSeparatorBar()
         .AddBar('List', '', 'List')
         .AddSeparatorBar()
         .AddBar('AddNew', '', 'AddNew')
         .AddBar('Delete', '', 'Delete')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS FIRST AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<First]
   cOnClickCommand = [m.goStateManager.Execute('Form Nav First')]
   cSkipFor        = [not m.goStateManager.GetValue('Form Nav First')]
ENDDEFINE

*===============================================================================
DEFINE CLASS Prior AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Prior]
   cOnClickCommand = [m.goStateManager.Execute('Form Nav Prior')]
   cSkipFor        = [not m.goStateManager.GetValue('Form Nav Prior')]
ENDDEFINE

*===============================================================================
DEFINE CLASS NEXT AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Next]
   cOnClickCommand = [m.goStateManager.Execute('Form Nav Next')]
   cSkipFor        = [not m.goStateManager.GetValue('Form Nav Next')]
ENDDEFINE

*===============================================================================
DEFINE CLASS LAST AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Last]
   cOnClickCommand = [m.goStateManager.Execute('Form Nav Last')]
   cSkipFor        = [not m.goStateManager.GetValue('Form Nav Last')]
ENDDEFINE

*===============================================================================
DEFINE CLASS LIST AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<List]
   cOnClickCommand = [m.goStateManager.Execute('Form List')]
   cSkipFor        = [not m.goStateManager.GetValue('Form List')]
ENDDEFINE

*===============================================================================
DEFINE CLASS AddNew AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Add New]
   cOnClickCommand = [m.goStateManager.Execute('Form New')]
   cSkipFor        = [not m.goStateManager.GetValue('Form New')]
ENDDEFINE

*===============================================================================
DEFINE CLASS DELETE AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Delete]
   cOnClickCommand = [m.goStateManager.Execute('Form Delete')]
   cSkipFor        = [not m.goStateManager.GetValue('Form Delete')]
ENDDEFINE




*===============================================================================
*===============================================================================
*===============================================================================
DEFINE CLASS WINDOWS AS SFPad OF SFMenu.vcx
*===============================================================================
*===============================================================================
*===============================================================================
   cCaption   = [\<Window]
   cKey       = [ALT+W]
   cPopupName = [Window]
   cSkipFor   = [m.goApp.lExpired]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('WindowClose', '', 'WindowClose')
         .AddBar('WindowCycle', '', 'WindowCycle')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS WindowClose AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Close]
   cOnClickCommand = [m.goStateManager.Execute('Form Close')]
   cSkipFor        = [not m.gostatemanager.getvalue('form close')]
ENDDEFINE

*===============================================================================
DEFINE CLASS WindowCycle AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption   = [C\<ycle]
   cKey       = [CTRL+F1]
   cKeyText   = [Ctrl+F1]
   cSystemBar = [_mwi_rotat]
ENDDEFINE


*===============================================================================
*===============================================================================
*===============================================================================
DEFINE CLASS HelpMenu AS SFPad OF SFMenu.vcx
*===============================================================================
*===============================================================================
*===============================================================================
   cCaption   = [\<Help]
   cKey       = [ALT+H]
   cPopupName = [HelpMenu]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('HelpTopics', '', 'HelpTopics')
         .AddBar('HelpOnline', '', 'HelpOnline')
         .AddSeparatorBar()
         .AddBar('SherWareNews', '', 'SherWareNews')
         .AddSeparatorBar()


         .AddBar('VersionInfo', '', 'VersionInfo')
         .AddBar('TermsAndConditions', '', 'TermsAndConditions')
         IF m.goapp.lAMVersion
            .AddBar('ReleaseNotesAM', '', 'ReleaseNotesAM')
         ENDIF
         IF m.goapp.lDMVersion
            .AddBar('ReleaseNotesDM', '', 'ReleaseNotesDM')
         ENDIF
         IF m.goapp.lQBVersion
            .AddBar('ReleaseNotesDMIE', '', 'ReleaseNotesDMIE')
         ENDIF

         IF NOT m.goapp.lCloudServer
            .AddBar('ForceUpdate', '', 'ForceUpdate')
*!*               .AddBar('ForceModUpd', '', 'ForceModUpd')
            .AddBar('ForceStateUpd', '', 'ForceStateUpd')
         ENDIF

         IF NOT m.goapp.lCloudServer
            .AddSeparatorBar()
         ENDIF

*!*            .AddBar('EmailSupport', '', 'EmailSupport')
         .AddBar('SupportPortal', '', 'SupportPortal')
         .AddBar('ConnectWithSupport', '', 'ConnectWithSupport')

         .AddSeparatorBar()
         .AddBar('SystemLog', '', 'SystemLog')
      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS HelpTopics AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [Topics...]
   cKey            = [F1]
   cKeyText        = [F1]
   cOnClickCommand = [HELP]
ENDDEFINE

*===============================================================================
DEFINE CLASS HelpOnline AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Help Online]

   PROCEDURE CLICK
      DO CASE
         CASE m.goapp.lAMVersion
            lcurl = 'https://support.sherware.com/help/am'
         CASE m.goapp.lDMVersion
            lcurl = 'https://support.sherware.com/help/dm'
         CASE m.goapp.lQBVersion
            lcurl = 'https://support.sherware.com/help/dmie'
         OTHERWISE
            RETURN
      ENDCASE

* declare API-function 'ShellExecute'
      DECLARE ShellExecute IN shell32.DLL INTEGER, STRING, STRING, STRING, STRING, INTEGER

* let windows decide, which app computes URLs
      ShellExecute( 0, [open], lcurl, [], [], 1 )

* undeclare API-function
      CLEAR DLLS [ShellExecute]
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS SherWareNews AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Pivoten News]
   PROCEDURE CLICK
      IF FILE('datafiles\antview.txt')
         m.goStateManager.OpenFormMulti('antnews.scx',.T.)
      ELSE
         m.goStateManager.OpenFormMulti('news.scx',.T.)
      ENDIF
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS VersionInfo AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption        = [\<Version Information]
   cOnClickCommand = [m.goStateManager.openformmulti('appversion.scx')]
ENDDEFINE

*===============================================================================
DEFINE CLASS TermsAndConditions AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [View Terms and Conditions]

   PROCEDURE CLICK
      lcurl = 'https://pivoten.com/saas-agreement'

* declare API-function 'ShellExecute'
      DECLARE ShellExecute IN shell32.DLL INTEGER, STRING, STRING, STRING, STRING, INTEGER

* let windows decide, which app computes URLs
      ShellExecute( 0, [open], lcurl, [], [], 1 )

* undeclare API-function
      CLEAR DLLS [ShellExecute]
   ENDPROC
ENDDEFINE



*===============================================================================
DEFINE CLASS ReleaseNotesAM AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [View Release \<Notes]

   PROCEDURE CLICK
      lcurl = 'https://support.sherware.com/changesam.html'

* declare API-function 'ShellExecute'
      DECLARE ShellExecute IN shell32.DLL INTEGER, STRING, STRING, STRING, STRING, INTEGER

* let windows decide, which app computes URLs
      ShellExecute( 0, [open], lcurl, [], [], 1 )

* undeclare API-function
      CLEAR DLLS [ShellExecute]
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS ReleaseNotesDM AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [View Release \<Notes]

   PROCEDURE CLICK
      lcurl = 'https://support.sherware.com/changesdm.html'

* declare API-function 'ShellExecute'
      DECLARE ShellExecute IN shell32.DLL INTEGER, STRING, STRING, STRING, STRING, INTEGER

* let windows decide, which app computes URLs
      ShellExecute( 0, [open], lcurl, [], [], 1 )

* undeclare API-function
      CLEAR DLLS [ShellExecute]
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS ReleaseNotesDMIE AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [View Release \<Notes]

   PROCEDURE CLICK
      lcurl = 'https://support.sherware.com/changesdmie.html'

* declare API-function 'ShellExecute'
      DECLARE ShellExecute IN shell32.DLL INTEGER, STRING, STRING, STRING, STRING, INTEGER

* let windows decide, which app computes URLs
      ShellExecute( 0, [open], lcurl, [], [], 1 )

* undeclare API-function
      CLEAR DLLS [ShellExecute]
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS ForceUpdate AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Force Update Next Start]

   PROCEDURE CLICK
      TRY
         lcSupport        = ''
         llSupportExpired = .F.
         lcSupportExpires = m.goapp.checksupportexp()
         IF CTOD(lcSupportExpires) < DATE()
            lcSupport        = 'SUPPORT EXIRED: '  + lcSupportExpires
            llSupportExpired = .T.
         ENDIF

         lcVersion = m.goapp.cFileVersion
         DO CASE
            CASE m.goapp.BrinePro
               lcdate        = DTOC(FDATE('brinepro.exe'))
               lcTime        = FTIME('brinepro.exe')
               lcProduct     = 'Brine Hauler'
               lcVersion     = 'Version: ' + lcVersion
               lcVersionDate = lcdate
               lcVersionTime = lcTime
            CASE m.goapp.lAMVersion
               lcdate        = DTOC(FDATE('ampro.exe'))
               lcTime        = FTIME('ampro.exe')
               lcProduct     = 'Oil & Gas Accounting Manager'
               lcVersion     = 'Version: ' + lcVersion
               lcVersionDate = lcdate
               lcVersionTime = lcTime
            CASE m.goapp.lQBVersion
               lcdate        = DTOC(FDATE('dmie.exe'))
               lcTime        = FTIME('dmie.exe')
               lcProduct     = 'Disbursement and JIB Manager (IE)'
               lcVersion     = 'Version: ' + lcVersion
               lcVersionDate = lcdate
               lcVersionTime = lcTime
            OTHERWISE
               lcdate        = DTOC(FDATE('dmpro.exe'))
               lcTime        = FTIME('dmpro.exe')
               lcProduct     = 'Oil & Gas Disbursement and JIB Manager'
               lcVersion     = 'Version: ' + lcVersion
               lcVersionDate = lcdate
               lcVersionTime = lcTime
         ENDCASE

         lcRegCode = ALLTRIM(m.goapp.ccode) + '*' + m.goapp.cStates
         lcAuditLogMsg =  'Client ID: ' + m.goapp.cclient + CHR(13) + CHR(10) + ;
            'Registered Company: ' + m.goapp.cRegCompany + CHR(13) + CHR(10) + ;
            'Reg Code:        ' + lcRegCode + CHR(13) + CHR(10) +;
            'Support Expires: ' + lcSupportExpires + CHR(13) + CHR(10) +;
            'State Codes:     ' + m.goapp.cStates + CHR(13) + CHR(10) +;
            'Application:     ' + lcProduct + CHR(13) + CHR(10) +;
            'Version:         ' + lcVersion + CHR(13) + CHR(10) +;
            'Date:            ' + lcVersionDate + CHR(13) + CHR(10) +;
            'Time:            ' + lcVersionTime + CHR(13) + CHR(10)

         lcLog     = "access"
         lcLogType = "forceUpdate"
         lcMessage = lcAuditLogMsg
         SendLogToNewRelic(lcLog, lcLogType, lcMessage, "", "", "", "", "") && Pass 11 Attributes

         IF NOT FILE('datafiles\forceupd.cfg')
            fh = FCREATE('datafiles\forceupd.cfg')
            IF fh > 0
               MESSAGEBOX('The Software will exit now. Start it up again to download an update.', 64, 'Force Update')
               QUIT
            ELSE
               MESSAGEBOX('Could not create the temp file to force the update. Please try again later.', 64, 'Force Update')
            ENDIF
         ELSE
            MESSAGEBOX('The Software will exit now. Start it up again to download an update.', 64, 'Force Update')
            QUIT
         ENDIF
      CATCH TO loError
*         MESSAGEBOX("Error: " + loError.MESSAGE + CHR(13) + "Line: " + TRANSFORM(loError.LINENO), 16, "Force Update")
      ENDTRY
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS ForceModUpd AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<Force Optional Module Updates]

   PROCEDURE AddBars
      WITH THIS
         .AddBar('BrineModUpd', '', 'BrineModUpd')
         .AddBar('Ten99ModUpd', '', 'Ten99ModUpd')
         .AddBar('Ten65K1ModUpd', '', 'Ten65K1ModUpd')

      ENDWITH
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS BrineModUpd AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Update \<Brine Module Next Start]

   PROCEDURE CLICK
      TRY
         ERASE ('brinemoddate.txt')
      CATCH
      ENDTRY
      MESSAGEBOX('The Brine Module will be updated the next time you access it.', 64, 'Brine Module Update')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Ten99ModUpd AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Update \<1099 Module Next Start]

   PROCEDURE CLICK
      TRY
         ERASE (m.goapp.cRptsFolder + '1099s\ten99sdate.txt')
      CATCH
      ENDTRY
      MESSAGEBOX('The 1099s Module will be updated the next time you access it.', 64, '1099 Module Update')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS Ten65k1ModUpd AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Update 1065\\<K1 Module Next Start]

   PROCEDURE CLICK
      TRY
         ERASE (m.goapp.cRptsFolder + '1065-k1\ten65k1date.txt')
      CATCH
      ENDTRY
      MESSAGEBOX('The 1065/K1 Module will be updated the next time you access it.', 64, '1065/K1 Module Update')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS ForceStateUpd AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Update \<State Reports Next Start]

   PROCEDURE CLICK
      TRY
         ERASE (m.goapp.cRptsFolder + 'Statereports\oh\ohreports.txt')
      CATCH
      ENDTRY
      TRY
         ERASE (m.goapp.cRptsFolder + 'Statereports\ny\nyreports.txt')
      CATCH
      ENDTRY
      TRY
         ERASE (m.goapp.cRptsFolder + 'Statereports\wv\wvreports.txt')
      CATCH
      ENDTRY
      TRY
         ERASE (m.goapp.cRptsFolder + 'Statereports\co\coreports.txt')
      CATCH
      ENDTRY
      TRY
         ERASE (m.goapp.cRptsFolder + 'Statereports\txt\txreports.txt')
      CATCH
      ENDTRY
      TRY
         ERASE (m.goapp.cRptsFolder + 'Statereports\wy\wyreports.txt')
      CATCH
      ENDTRY
      TRY
         ERASE (m.goapp.cRptsFolder + 'Statereports\la\lareports.txt')
      CATCH
      ENDTRY
      MESSAGEBOX('The State Reports will be updated the next time you access them.', 64, 'State Reports Update')
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS SupportPortal AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [Support Web Portal]

   PROCEDURE CLICK
      lcurl = 'https://support.pivoten.com/welcome'

* declare API-function 'ShellExecute'
      DECLARE ShellExecute IN shell32.DLL INTEGER, STRING, STRING, STRING, STRING, INTEGER

* let windows decide, which app computes URLs
      ShellExecute( 0, [open], lcurl, [], [], 1 )

* undeclare API-function
      CLEAR DLLS [ShellExecute]
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS ConnectWithSupport AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = "\<Connect with Pivoten Support"

   PROCEDURE CLICK

      llReturn=.T.
      IF NOT m.goapp.sysChilKatLicense && Check to see if Chilkat is loaded
         llReturn = .F.
      ENDIF

      LOCAL loHttp, lcurl, lcLocalFilePath, lcCommonFolder, lnSuccess, lcWebURL
      lcWebURL = 'https://sos.splashtop.com'
      lcurl    = "https://download.splashtop.com/sos/SplashtopSOS.exe" && Path to the executable file
      SET PATH TO (m.goapp.cCommonFolder)
      lcPath          = SET('path')
      lcCommonFolder  = SET('path')
      lcLocalFilePath = lcCommonFolder + "SplashtopSOS.exe"

      IF llReturn
         loHttp = CREATEOBJECT("Chilkat_9_5_0.Http") && Create a new Chilkat HTTP object
         lnSuccess = loHttp.Download(lcurl, lcLocalFilePath)
      ELSE
         lnSuccess=0
      ENDIF
      IF (lnSuccess <> 1) THEN
         DECLARE ShellExecute IN shell32.DLL INTEGER, STRING, STRING, STRING, STRING, INTEGER
         MESSAGEBOX("Error downloading file. You will now be redirected to the download page to manually run the remote support tool.", 0, "Error")
         ShellExecute( 0, [open], lcWebURL, [], [], 1 )
         CLEAR DLLS [ShellExecute]
         RELEASE loHttp
         CANCEL
      ELSE
      ENDIF

      lcExePath = lcPath + 'SplashtopSOS.exe'
      DECLARE ShellExecute IN shell32.DLL INTEGER, STRING, STRING, STRING, STRING, INTEGER &&  declare API-function 'ShellExecute'

      IF FILE(lcExePath) && Check if the executable file exists
         ShellExecute(0, "open", lcExePath, "", "", 1) && If the executable exists, run it
      ELSE
         ShellExecute( 0, [open], lcWebURL, [], [], 1 )
      ENDIF
      CLEAR DLLS "ShellExecute" && undeclare API-function
   ENDPROC
ENDDEFINE

*===============================================================================
DEFINE CLASS AppAbout AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<About...]

   PROCEDURE CLICK
      m.goStateManager.OpenModalForm('frmAboutApplication')
   ENDPROC
ENDDEFINE


*===============================================================================
DEFINE CLASS SystemLog AS SFBar OF SFMenu.vcx
*===============================================================================
   cCaption = [\<System Problem Log]

   PROCEDURE CLICK
      DO errorprint
   ENDPROC
ENDDEFINE













